package com.researchspace.dao.hibernate;

import com.researchspace.core.util.ISearchResults;
import com.researchspace.core.util.SearchResultsImpl;
import com.researchspace.dao.FolderDao;
import com.researchspace.dao.GenericDaoHibernate;
import com.researchspace.model.DefaultGroupNamingStrategy;
import com.researchspace.model.Group;
import com.researchspace.model.IGroupNamingStrategy;
import com.researchspace.model.PaginationCriteria;
import com.researchspace.model.User;
import com.researchspace.model.core.RecordType;
import com.researchspace.model.record.BaseRecord;
import com.researchspace.model.record.Folder;
import com.researchspace.model.views.TreeViewItem;
import java.util.List;
import java.util.Optional;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.SimpleExpression;
import org.hibernate.query.Query;
import org.springframework.cache.annotation.CachePut;
import org.springframework.stereotype.Repository;

@Repository(value = "folderDao")
@SuppressWarnings({"unchecked"})
public class FolderDaoHibernateImpl extends GenericDaoHibernate<Folder, Long> implements FolderDao {

  public FolderDaoHibernateImpl() {
    super(Folder.class);
  }

  // updates cache if record has global identifier
  @CachePut(
      value = "com.researchspace.model.record.BaseRecord",
      key = "#a0.oid",
      condition = "(#a0.id ne null)")
  public Folder save(Folder object) {
    // overridden to allow liniage to be generated by save
    // object.generateLineage();
    return super.save(object);
  }

  public Folder getRootRecordForUser(User user) {
    Query<Folder> q =
        getSession()
            .createQuery(
                "from Folder f join fetch f.owner owner where owner.id=:userId and"
                    + " f.editInfo.name=:folderName and f.type like :type",
                Folder.class);
    q.setParameter("type", "%" + RecordType.ROOT.name() + "%");
    q.setParameter("userId", user.getId());
    q.setParameter("folderName", user.getUsername());
    return q.uniqueResult();
  }

  public Folder getGalleryRootFolderForUser(User user) {
    Query<Folder> q =
        getSession()
            .createQuery("from Folder where type like :type and owner.id=:id", Folder.class);
    q.setParameter("type", "%" + RecordType.ROOT_MEDIA.name() + "%");
    q.setParameter("id", user.getId());
    return getFirstResultOrNull(q);
  }

  @Override
  public ISearchResults<TreeViewItem> getFolderListingForTreeView(
      Long folderId, PaginationCriteria<TreeViewItem> pgCrit) {

    Query<TreeViewItem> q =
        getSession()
            .createQuery(
                "select new com.researchspace.model.views.TreeViewItem (br.id,br.editInfo.name,"
                    + " br.type, br.deleted, br.editInfo.creationDateMillis,"
                    + " br.editInfo.modificationDateMillis, emf.extension) from BaseRecord br left"
                    + " join EcatMediaFile emf on br.id=emf.id inner join RecordToFolder rtf on"
                    + " rtf.record.id=br.id where rtf.folder.id=:folderId and br.deleted=0 and"
                    + " rtf.recordInFolderDeleted=0 order by br.editInfo.modificationDateMillis"
                    + " desc",
                TreeViewItem.class)
            .setParameter("folderId", folderId);
    List<TreeViewItem> results = q.list();
    ISearchResults<TreeViewItem> rc = new SearchResultsImpl<>(results, pgCrit, results.size());
    return rc;
  }

  public Folder getSystemFolderForUserByName(User user, String systemFolderName) {
    Query<Folder> q =
        getSession()
            .createQuery(
                "from Folder where  owner.id=:id and name=:name and type like :type", Folder.class);
    q.setParameter("type", "%" + RecordType.SYSTEM.name() + "%")
        .setParameter("name", systemFolderName);
    q.setParameter("id", user.getId());
    return getFirstResultOrNull(q);
  }

  @Override
  public List<Long> getRecordIds(Folder fd) {
    Long pid = fd.getId();
    return getSession()
        .createQuery("SELECT rtf.record.id FROM RecordToFolder rtf WHERE folder_id = :parentId")
        .setParameter("parentId", pid)
        .list();
  }

  @Override
  public Folder getLabGroupFolderForUser(User u) {
    return getSystemFolder(Folder.LAB_GROUPS_FOLDER_NAME, u);
  }

  @Override
  public Long getLabGroupFolderIdForUser(User user) {
    Query<Long> q =
        getSession()
            .createQuery(
                "select f.id from Folder f "
                    + "where f.owner.id = :id "
                    + "and f.editInfo.name=:name "
                    + "and f.systemFolder = true",
                Long.class)
            .setParameter("name", Folder.LAB_GROUPS_FOLDER_NAME)
            .setParameter("id", user.getId());
    return q.uniqueResult();
  }

  @Override
  public Folder getIndividualSharedItemsFolderForUser(User u) {
    return getSystemFolder(Folder.INDIVIDUAL_SHARE_ITEMS_FLDER_NAME, u);
  }

  @Override
  public Folder getCollaborationGroupsSharedFolderForUser(User u) {
    return getSystemFolder(Folder.COLLABORATION_GROUPS_FLDER_NAME, u);
  }

  @Override
  public Folder getProjectGroupsSharedFolderForUser(User u) {
    return getSystemFolder(Folder.PROJECT_GROUPS_FOLDER_NAME, u);
  }

  private Folder getSystemFolder(String systemFolderName, User user) {
    return getSession()
        .createQuery(
            "from Folder f join fetch f.owner owner "
                + "where owner.id = :userId "
                + "and f.editInfo.name=:folderName "
                + "and f.systemFolder = true",
            Folder.class)
        .setParameter("userId", user.getId())
        .setParameter("folderName", systemFolderName)
        .uniqueResult();
  }

  private Criteria getFolderCriteria() {
    Session session = getSessionFactory().getCurrentSession();
    return session.createCriteria(Folder.class);
  }

  public Folder getSharedFolderForGroup(Group group) {
    return get(group.getCommunalGroupFolderId());
  }

  @Override
  public Folder getSharedSnippetFolderForGroup(Group group) {
    return get(group.getSharedSnippetGroupFolderId());
  }

  public Folder getIndividualSharedFolderForUsers(
      User sharer, User sharee, BaseRecord docOrNotebook) {
    IGroupNamingStrategy namingStrgy = new DefaultGroupNamingStrategy();
    String flderName = namingStrgy.getIndividualSharedFolderName(sharer, sharee);
    if (docOrNotebook != null && docOrNotebook.isSnippet()) {
      flderName = namingStrgy.getIndividualSharedSnippetsFolderName(sharer, sharee);
    }
    return (Folder)
        getFolderCriteria()
            .add(nameRestriction(flderName))
            .add(systemFolderRestriction())
            .add(Restrictions.in("owner", new User[] {sharer, sharee}))
            .uniqueResult();
  }

  @Override
  public Folder getUserSharedFolder(User u) {
    return (Folder)
        getFolderCriteria()
            .add(Restrictions.eq("editInfo.name", Folder.SHARED_FOLDER_NAME))
            .add(ownerRestriction(u))
            .add(systemFolderRestriction())
            .add(
                Restrictions.not(
                    Restrictions.ilike("type", RecordType.ROOT_MEDIA.name(), MatchMode.ANYWHERE)))
            .add(Restrictions.eq("deleted", Boolean.FALSE))
            .uniqueResult();
  }

  @Override
  public Folder getTemplateFolderForUser(User user) {
    List<Folder> folders =
        getFolderCriteria()
            .add(nameRestriction(Folder.TEMPLATE_MEDIA_FOLDER_NAME))
            .add(ownerRestriction(user))
            .add(systemFolderRestriction())
            .add(typeLike(RecordType.TEMPLATE.name()))
            .list();
    return folders.isEmpty() ? null : folders.get(0);
  }

  @Override
  public Optional<Folder> getApiFolderForContentType(String folderName, User subject) {
    return Optional.ofNullable(
        (Folder)
            getFolderCriteria()
                .add(nameRestriction(Folder.API_INBOX_FOLDER_NAME))
                .add(ownerRestriction(subject))
                .add(systemFolderRestriction())
                .add(typeLike(RecordType.API_INBOX.name()))
                .createAlias("parents", "parents")
                .createAlias("parents.folder", "parent")
                .add(Restrictions.eq("parent.editInfo.name", folderName))
                .uniqueResult());
  }

  @Override
  public Optional<Folder> getApiInboxSubFolderByName(
      Folder apiFolder, String folderName, User subject) {
    List<Folder> folderList =
        getFolderCriteria()
            .add(nameRestriction(folderName))
            .add(ownerRestriction(subject))
            .add(systemFolderRestriction())
            .createAlias("parents", "parents")
            .createAlias("parents.folder", "parent")
            .add(Restrictions.eq("parent.id", apiFolder.getId()))
            .list();
    return folderList.isEmpty() ? Optional.empty() : Optional.of(folderList.get(0));
  }

  @Override
  public Optional<Folder> getImportFolder(User subject) {
    return Optional.ofNullable(
        (Folder)
            getFolderCriteria()
                .add(nameRestriction(Folder.IMPORTS_INBOX_FOLDER_NAME))
                .add(ownerRestriction(subject))
                .add(systemFolderRestriction())
                .add(typeLike(RecordType.IMPORTS.name()))
                .uniqueResult());
  }

  private Criterion typeLike(String type) {
    return Restrictions.ilike("type", "%" + type + "%");
  }

  private SimpleExpression nameRestriction(String name) {
    return Restrictions.eq("editInfo.name", name);
  }

  private SimpleExpression systemFolderRestriction() {
    return Restrictions.eq("systemFolder", Boolean.TRUE);
  }

  private SimpleExpression ownerRestriction(User user) {
    return Restrictions.eq("owner", user);
  }
}
