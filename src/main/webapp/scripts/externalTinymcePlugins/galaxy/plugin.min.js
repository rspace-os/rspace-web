/**
 * At the time this code runs, the attached file data is embedded as a text string in the document.
 * It also needs an initial 'div' prepended to make it into balanced html
 * @param selector
 * @return an array of attached recordIds mapped to html which can be directly inserted into the dom to
 * display attached file info. This is copied from the html which will be used to display attachment
 * previews in the document editor.
 */
function getAttachedFilesByParsingEmbeddedText(selector) {
  const recordIDToHtml = [];
  $('<div>' + $('#' + selector).val()).find('.attachmentDiv').each(
      function (index) {
        const attachedRecordId = $(this).find('.attachmentInfoDiv').attr(
            'id').substring(18);
        const html = $(this).html();
        recordIDToHtml.push({id: attachedRecordId, html: html});
      });
  $($('#' + selector).val()).find('.imageDropped.inlineImageThumbnail').each(
      function (index) {
        const srcString = $(this).attr('src');
        if (srcString.indexOf('sourceId=') !== -1) {
          //there are at least two distinct types of embedded image format?
          const positionSrc = srcString.indexOf('sourceId=');
          const positionSrcEnd = srcString.indexOf('&', positionSrc);
          const attachedRecordId = srcString.substring(positionSrc + 9,
              positionSrcEnd);
          $(this).attr('height', 50);
          $(this).attr('width', 50);
          const name = $(this).attr('alt').replace("image", "");
          let html = $(this.parentElement).html();
          html = name ? "<div>" + html + name + "</div>" : html;
          recordIDToHtml.push({id: attachedRecordId, html: html});
        } else {
          //ignore these as they do not seem to have parseable IDs and seem to be legacy example data
        }
      });
  $($('#' + selector).val()).find('img.chem').each(
      function (index) {
        const dataChemFileId = $(this).attr('data-chemfileid');
        const attachedRecordId = dataChemFileId.replaceAll('"', '');
        $(this).attr('height', 50);
        $(this).attr('width', 50);
        const name = $(this).attr('alt').replace("image", "");
        let html = $(this.parentElement).html();
        html = name ? "<div>" + html + name + "</div>" : html;
        recordIDToHtml.push({id: attachedRecordId, html: html});
      });
  return recordIDToHtml;
}

tinymce.PluginManager.add('galaxy', function (editor, url) {

  editor.addCommand("cmdGalaxy", function () {
    editor.attachedFileRecordIdsToHtml = getAttachedFilesByParsingEmbeddedText(
        editor.id);
    editor.windowManager.openUrl({
      title: "Use a Galaxy Workflow",
      url: url + "/dialog.html",
      width: 1400,
      height: 800,
      buttons: [
        {
          type: "cancel",
          id: "close",
          name: "close",
          text: "Close"
        },
        {
          type: "custom",
          id: "Upload",
          name: "Upload",
          text: "Upload To Galaxy",
          disabled: true,
          primary: true
        }
      ],
      onAction(dialogApi, button) {
        if (button.name === "Upload") {
          editor.fire("galaxy-used");
          RS.trackEvent('GalaxyUpload');
        }
      },
      onClose() {
      },
      onMessage(dialogApi, details) {
        let buttonClose = $("button[title='Close']");
        let buttonUpload = $("button[title='Upload To Galaxy']");
        if (details.mceAction === "uploading") {
          buttonClose.attr("disabled", "disabled");
        } else if (details.mceAction === "uploading-complete") {
          buttonClose.attr("disabled", null);
        } else if (details.mceAction === "data-selected") {
          buttonUpload.attr("disabled", null);
        } else if (details.mceAction === "no-data-selected") {
          buttonUpload.attr("disabled", "disabled");
        }
      }
    });
  });

  editor.ui.registry.addButton('galaxy', {
    icon: 'galaxy',
    tooltip: 'Use a Galaxy Workflow',
    onAction: function () {
      editor.execCommand("cmdGalaxy");
    },
  });

  editor.ui.registry.addMenuItem('optGalaxy', {
    text: 'From Galaxy',
    icon: 'galaxy',
    onAction: function () {
      editor.execCommand("cmdGalaxy");
    },
  });

  if (!window.insertActions) {
    window.insertActions = new Map();
  }
  window.insertActions.set("optGalaxy", {
    text: 'From Galaxy',
    icon: 'galaxy',
    action: () => {
      editor.execCommand("cmdGalaxy");
    },
  });
});
