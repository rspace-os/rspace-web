/**
 * At the time this code runs, the attached file data is embedded as a text string in the document.
 * It also needs an initial 'div' prepended to make it into balanced html
 * @param selector
 * @return an array of attached recordIds mapped to html which can be directly inserted into the dom to
 * display attached file info. This is copied from the html which will be used to display attachment
 * previews in the document editor.
 */
function getAttachedFilesByParsingEmbeddedText(selector) {
    const recordIDToHtml = [];
    $('<div>' + $('#' + selector).val()).find('.attachmentDiv').each(
        function (index) {
            const attachedRecordId = $(this).find('.attachmentInfoDiv').attr(
                'id').substring(18);
            const html = $(this).html();
            recordIDToHtml.push({id: attachedRecordId, html: html});
        });
    $($('#' + selector).val()).find('.imageDropped.inlineImageThumbnail').each(
        function (index) {
            const srcString = $(this).attr('src');
            const positionSrc = srcString.indexOf('sourceId=');
            const positionSrcEnd = srcString.indexOf('&', positionSrc);
            const attachedRecordId = srcString.substring(positionSrc + 9, positionSrcEnd);
            $(this).attr('height',50);
            $(this).attr('width',50);
            const html = $(this.parentElement).html();
            recordIDToHtml.push({id: attachedRecordId, html: html});
        });
    return recordIDToHtml;
}
tinymce.PluginManager.add('galaxy', function (editor, url) {

    editor.addCommand("cmdGalaxy", function () {
        editor.attachedFileRecordIdsToHtml = getAttachedFilesByParsingEmbeddedText(editor.id);
        editor.windowManager.openUrl({
            title: "Use a Galaxy Workflow",
            url: url + "/dialog.html",
            width: 1400,
            height: 800,
            buttons: [
                {
                    type: "custom",
                    id: "close",
                    name: "close",
                    text: "Close",
                    enabled: false,
                },
                {
                    type: "cancel",
                    id: "cancel",
                    name: "cancel",
                    text: "Cancel",
                    primary: true
                }
            ],
            onAction(dialogApi, button) {
                if (button.name == "close") {
                    editor.fire("galaxy-used");
                    RS.trackEvent('DataUsedInGalaxy');
                    editor.windowManager.close();
                }  else if (button.name == "cancel") {
                    editor.fire("galaxy-cancelled");
                    RS.trackEvent('DataUsedInGalaxy');
                }
            },
            onClose() {
            },
            onMessage(dialogApi, details) {
                let buttonClose = $("button[title='Close']");
                let buttonCancel = $("button[title='Cancel']");
                    if (details.mceAction == "enableClose") {
                        buttonClose.prop("disabled", null);
                        buttonClose.removeAttr("disabled");
                        buttonCancel.attr("disabled", "disabled");
                }   else if (details.mceAction == "uploading") {
                        buttonClose.attr("disabled", "disabled");
                        buttonCancel.attr("disabled", "disabled");
                    } else if (details.mceAction == "uploading_complete") {
                        buttonClose.attr("disabled", null);
                    }
                    else if (details.mceAction == "disableClose") {
                        buttonClose.attr("disabled", "disabled");
                }
            }
        });
    });

    editor.ui.registry.addButton('galaxy', {
        icon: 'galaxy',
        tooltip: 'Use a Galaxy Workflow',
        onAction: function () {
            editor.execCommand("cmdGalaxy");
        },
    });

    editor.ui.registry.addMenuItem('optGalaxy', {
        text: 'From Galaxy',
        icon: 'galaxy',
        onAction: function () {
            editor.execCommand("cmdGalaxy");
        },
    });

    if(!window.insertActions) window.insertActions = new Map();
    window.insertActions.set("optGalaxy", {
      text: 'From Galaxy',
      icon: 'galaxy',
      action: () => {
        editor.execCommand("cmdGalaxy");
      },
    });
});
