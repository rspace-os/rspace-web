let tokenClient;
let accessToken = null;
let pickerInited = false;
let gisInited = false;
let picker;

function initGoogleDrive() {
	gapi.load('client:picker', async () =>{
		await gisLoaded();
		await initializePicker();
		getAccessToken()
	});
}

async function initializePicker() {
	await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
	pickerInited = true;
}

function gisLoaded() {
	tokenClient = google.accounts.oauth2.initTokenClient({
		client_id: gdClientId,
		scope: gdScope,
		callback: '',
	});
	gisInited = true;
}

function getAccessToken() {
	if (gisInited && pickerInited) {
		tokenClient.callback = async (response) => {
			if (response.error !== undefined) {
				throw (response);
			}
			accessToken = response.access_token;
			await createPicker()
		}
		if (accessToken === null) {
			// Prompt the user to select a Google Account and ask for consent to share their data
			// when establishing a new session.
			tokenClient.requestAccessToken({prompt: 'consent'});
		} else {
			// Skip display of account chooser and consent dialog for an existing session.
			tokenClient.requestAccessToken({prompt: ''});
		}
	}
}

function createPicker() {
	picker = new google.picker.PickerBuilder()
	.enableFeature(google.picker.Feature.NAV_HIDDEN)
	.enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
	.setDeveloperKey(gdDeveloperKey)
	.setAppId(gdClientId)
	.setOAuthToken(accessToken)
	.addView(google.picker.ViewId.DOCS)
	.setCallback(pickerCallback)
	.build();
	picker.setVisible(true);
}

/**
 * Displays the file details of the user's selection.
 * @param {object} data - Containers the user selection from the picker
 */
function pickerCallback(data) {
	if (data.action === google.picker.Action.PICKED) {
		const doc = data[google.picker.Response.DOCUMENTS][0];
		googleDriveLinkUrl = doc[google.picker.Document.EMBEDDABLE_URL] || doc[google.picker.Document.URL];

		const name = doc[google.picker.Document.NAME];

		const extension = RS.getFileExtension(name);
		const iconPath = RS.getIconPathForExtension(extension);
		const docId = doc.id;

		const json = {
			id: 'googledrive-' + docId,
			fileStore: 'Google Drive',
			recordURL: googleDriveLinkUrl,
			name: name,
			iconPath: iconPath,
			badgeIconPath: '/images/icons/drive_icon.png'
		};

		RS.insertTemplateIntoTinyMCE('insertedExternalDocumentTemplate', json);
	}

}

tinymce.PluginManager.add('googledrive', function (editor, url) {

	googleDriveEditor = editor;
	googleDriveUrl = url;

	// Add command to open the comment dialog.htm
	editor.addCommand('cmdGoogleDrive', function () {
		initGoogleDrive();
	});

	// Add a button that opens a window
	editor.ui.registry.addButton('googledrive', {
		tooltip: 'Insert from Google Drive',
		icon: 'google_drive',
		onAction: function () {
			editor.execCommand("cmdGoogleDrive");
		}
	});

	// Adds a menu item to the insert menu
	editor.ui.registry.addMenuItem('optGoogleDrive', {
		text: 'From Google Drive',
		icon: 'google_drive',
		onAction: function () {
			editor.execCommand("cmdGoogleDrive");
		}
	});

  if(!window.insertActions) window.insertActions = new Map();
  window.insertActions.set("optGoogleDrive", {
    text: 'From Google Drive',
    icon: 'google_drive',
    action: () => {
			editor.execCommand("cmdGoogleDrive");
    },
  });

});
