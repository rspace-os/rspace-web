/**
 * Research Space link plugin
 * Author: fran
 * Date : 23/09/2015
 */

// store node when unselected
var storedNode;

tinymce.PluginManager.add('contexttoolbars', function (editor, url) {
	addCommonButtons(editor);
	addImageContextToolbar(editor);
	addAttachmentContextToolbar(editor);
	addCodeSampleContextToolbar(editor);
	addCalcTableContextToolbar(editor);
	addInternalLinkContextToolbar(editor);
	addNfsFileLinkContextToolbar(editor);
	addKetcherChemContextToolbar(editor);
	addEquationContextToolbar(editor);
});

function addCommonButtons(editor) {
	editor.ui.registry.addButton('downloadImage', {
		tooltip: 'Download as image',
		icon: 'download',
		onAction: function () {
			downloadAsImage($(editor.selection.getNode()));
		}
	});
}

function addImageContextToolbar(editor) {
	editor.ui.registry.addButton('imageinfopopup', {
		tooltip: 'Image details',
		icon: 'info',
		onAction: function () {
			var imgNode = editor.selection.getNode();
			showImageInfoPopup($(imgNode));
		}
	});

	editor.ui.registry.addButton('sketchEdit', {
		tooltip: 'Sketch tool',
		icon: 'sketch',
		onAction: function () { editor.execCommand("cmdSketch"); },
	});

	editor.ui.registry.addButton('editImage', {
		tooltip: 'Edit image',
		icon: 'edit-image',
		onAction: function () { editor.execCommand("mceResizeImage"); },
	});

	editor.ui.registry.addContextToolbar('sketchselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'img.sketch');
		},
		items: 'downloadImage | resizeImage sketchEdit',
		position: 'node',
		scope: 'node'
	});
	
	editor.ui.registry.addContextToolbar('imagetools', {
		predicate: function (node) {
			return editor.dom.is(node, 'img.imageDropped');
		},
		items: 'imageinfopopup downloadImage | resizeImage sketchEdit',
		position: 'node',
		scope: 'node'
	});
}

function addKetcherChemContextToolbar(editor){

	editor.ui.registry.addContextToolbar('chemicalFileViewableKetcher', {
		predicate: function (node) {
			return isChemFileAttachment(editor.selection.getNode()) && editor.dom.is(node, 'img.chem') && RS.chemistryProvider === 'indigo';
		},
		items: 'attachmentinfopopup attachmentdownload | resizeImage | ketcherViewable',
		position: 'node',
		scope: 'node'
	});
	editor.ui.registry.addContextToolbar('chemicalElementEditableKetcher', {
		predicate: function (node) {
			return !(isChemFileAttachment(editor.selection.getNode())) && editor.dom.is(node, 'img.chem') && RS.chemistryProvider === 'indigo';
		},
		items: 'downloadImage | resizeImage | ketcherEditable',
		position: 'node',
		scope: 'node'
	});

	editor.ui.registry.addButton('ketcherEditable', {
		tooltip: 'Edit structural formula in Ketcher',
		icon: 'chemical',
		onAction: function () { editor.execCommand("cmdKetcherEditable"); },});

	editor.ui.registry.addButton('ketcherViewable', {
		tooltip: 'View structure in Ketcher',
		icon: 'chemical',
		onAction: function () { editor.execCommand("cmdKetcherViewable"); },
	});
}

function isChemFileAttachment(elem) {
	var id = elem.getAttribute('data-chemfileid');
	return Boolean(id);
}

function addAttachmentContextToolbar(editor) {
	editor.ui.registry.addButton('attachmentinfopopup', {
		tooltip: 'Attachment details',
		icon: 'info',
		onAction: function () {
			var attachmentId = getCurrentAttachmentId();
			var $attachmentLink = $(editor.selection.getNode()).find('.attachmentLinked');
			var attachmentRevision = getCurrentAttachmentRevisionFrom$AttachmentLink($attachmentLink);
			showRecordInfo(attachmentId, attachmentRevision);
		}
	});

	editor.ui.registry.addButton('attachmentdownload', {
		tooltip: 'Download attachment',
		icon: 'download',
		onAction: function () {
			var $attachmentLink = $(editor.selection.getNode()).find('.attachmentLinked');
			var attachmentRevision = getCurrentAttachmentRevisionFrom$AttachmentLink($attachmentLink);
			var revisionSuffix = attachmentRevision ? "?revision=" + attachmentRevision : "";
			RS.openInNewWindow('/Streamfile/' + getCurrentAttachmentId() + revisionSuffix);
		}
	});

	editor.ui.registry.addButton('attachmentpreview', {
		tooltip: 'View attachment',
		icon: 'preview',
		onAction: function () {
			var id = getCurrentAttachmentId();
			var $attachmentLink = $(editor.selection.getNode()).find('.attachmentLinked');
			var revision = getCurrentAttachmentRevisionFrom$AttachmentLink($attachmentLink);
			var fileName = $attachmentLink.text();
			var extension = fileName.substring(fileName.lastIndexOf('.') + 1);
			RS.openWithPdfViewer(id, revision, fileName, extension);
		}
	});

	function getCurrentAttachmentId() {
		var $attachmentDiv = $(editor.selection.getNode());
		return getAttachmentIdFrom$Div($attachmentDiv);
	}

	function getCurrentAttachmentRevisionFrom$AttachmentLink($attachmentLink) {
		return $attachmentLink.data('rsrevision');
	}

	function getAttachmentExtension(elem) {
		var $attachmentLink = $(elem).find('.attachmentLinked');
		var fileName = $attachmentLink.text();
		var extension = fileName.substring(fileName.lastIndexOf('.') + 1);
		return extension;
	}

	function isPdfPreviewSupported(elem) {
		return RS.isPdfPreviewSupported(getAttachmentExtension(elem));
	}

	function isDocumentAttachment(elem) {
		return editor.dom.is(elem, '.attachmentDiv');
	}

	editor.ui.registry.addContextToolbar('attachment1selection', {
		predicate: function (node) {
			// is binary attachment
			return isDocumentAttachment(node) && !isPdfPreviewSupported(node);
		},
		items: 'attachmentinfopopup attachmentdownload',
		position: 'node',
		scope: 'node'
	});

	editor.ui.registry.addContextToolbar('attachment2selection', {
		predicate: function (node) {
			// is viewable attachment
			return isDocumentAttachment(node) && isPdfPreviewSupported(node);
		},
		items: 'attachmentinfopopup attachmentdownload attachmentpreview',
		position: 'node',
		scope: 'node'
	});
}

function addEquationContextToolbar(editor) {
	editor.ui.registry.addButton('equationedit', {
		icon: 'equation',
		tooltip: 'Edit equation',
		onAction: function () { editor.execCommand("cmdRsMathJax"); },
	});

	editor.ui.registry.addContextToolbar('equationselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'div.rsEquation');
		},
		items: 'equationedit',
		position: 'node',
		scope: 'node'
	});
}

function addCodeSampleContextToolbar(editor) {
	editor.ui.registry.addButton('codesampleedit', {
		icon: 'code-sample',
		tooltip: 'Edit code sample',
		onAction: function () { editor.execCommand("codesample"); }
	});

	editor.ui.registry.addContextToolbar('codesampleselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'pre[class*="language-"]');
		},
		items: 'codesampleedit',
		position: 'node',
		scope: 'node'
	});
}

function addCalcTableContextToolbar(editor) {
	editor.ui.registry.addButton('handsontableedit', {
		icon: 'table',
		tooltip: 'Edit calculations table',
		onAction: function () { editor.execCommand("cmdHandsontable"); },
	});

	editor.ui.registry.addButton('handsontabletocsv', {
		icon: 'save',
		tooltip: 'Download as CSV',
		onAction: function () {
			var $table = $(editor.selection.getNode()).find('table');
			var rs_tableExport = $table.tableExport({ formats: ['csv'], exportButtons: false, headers: false, ignoreCols: 0 });
			var tableid = $table.attr('id');
			var exportData = rs_tableExport.getExportData()[tableid]['csv'];
			rs_tableExport.export2file(exportData.data, exportData.mimeType, exportData.filename, exportData.fileExtension);
		},
	});

	editor.ui.registry.addContextToolbar('calctableselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'div.rsCalcTableDiv');
		},
		items: 'handsontableedit handsontabletocsv',
		position: 'node',
		scope: 'node'
	});
}

function addInternalLinkContextToolbar(editor) {
	editor.ui.registry.addButton('internallinkinfopopup', {
		tooltip: 'Document details',
		icon: 'info',
		onAction: function () {
			var linkNode = editor.selection.getNode();
			showLinkedRecordInfo($(linkNode));
		}
	});

	editor.ui.registry.addButton('locktoversion', {
		tooltip: 'Select version',
		icon: 'history',
		onAction: function (e) {
			var linkNode = editor.selection.getNode();
			
			if(linkNode.tagName == "BODY") {
				linkNode = storedNode;
			} else if(linkNode.tagName == "A") {
				storedNode = linkNode; 
			}
		
			var [id, version] = $(linkNode).data('globalid').split('v');
			id = id.replace(/\D/g,''); // Strip non-numeric characters from id

			var event = new CustomEvent('tinymce-insert-revision', {
				'detail': {
					id: id, 
					version: version, 
					el: $(linkNode)
				}
			});
			document.dispatchEvent(event);
		}
	});

	editor.ui.registry.addContextToolbar('internallinkselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'a.linkedRecord') && !$(node).data('globalid').startsWith("SD");
		},
		items: 'internallinkinfopopup',
		position: 'node',
		scope: 'node'
	});

	editor.ui.registry.addContextToolbar('internallinkselectionversioned', {
		predicate: function (node) {
			return editor.dom.is(node, 'a.linkedRecord') && $(node).data('globalid').startsWith("SD");
		},
		items: 'internallinkinfopopup locktoversion',
		position: 'node',
		scope: 'node'
	});
}

function addNfsFileLinkContextToolbar(editor) {
	editor.ui.registry.addButton('nfsfileinfopopup', {
		tooltip: 'Filestore link details',
		icon: 'info',
		onAction: function () {
			var linkNode = editor.selection.getNode();
			RS.initAndOpenNetFileInfoDialog($(linkNode));
		}
	});

	editor.ui.registry.addContextToolbar('nfsselection', {
		predicate: function (node) {
			return editor.dom.is(node, 'a.nfs_file');
		},
		items: 'nfsfileinfopopup',
		position: 'node',
		scope: 'node'
	});
}