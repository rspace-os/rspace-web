/*
  * Javascript file to provide sorting, paginating and management of notification
  * listings generated by /dashboard/notifications_ajax.jsp.
  * This js file provides javascript for html defined in notifications.tag.
  *
  * To use this in an HTML page there are 3 things to set up:
  *
  * 1) include messagetoolbar; this is where poliing results go:
  * <div id="messageToolbar" style="height: 15px; text-align: center;">
	<span class="messagebox" id="noMessages"></span>
	</div>
  *
  * 2) in your document.ready() function, call:
  * doPoll();//poll immediately for notifications
	//set up 10s poll interval for new notificatiosn
	pollForNewNotificationsAtInterval();
  * which sets up the polling.
  *
  */
$(document).ready(function() {

	//handles the accept/reject form in a toast message
	$(document).on('submit', '.specialMsgUpdate', function (e){
		var form$= $(this);
		e.preventDefault();
		//Prevent users accepting or rejecting multiple times PLUS give user some feedback.
		//The UI is 'slow' on Community RSpace the process can hang for 10-20 seconds.
		//Note - there can be multiple Invite Toasts on the screen, all with the same ID for accept and reject buttons
		if ($(e.target.acceptLabGrpRequest).length != 0) {
			$(e.target.acceptLabGrpRequest).prop("disabled", true);
			$(e.target.acceptLabGrpRequest).prop("value", "Sending...");
			$(e.target.parentElement.parentElement).find("#rejectLabGrpRequest").prop("disabled", true);
			$(e.target.parentElement.parentElement).find("#rejectLabGrpRequest").prop("value", "Sending...");
		} else if ($(e.target.rejectLabGrpRequest?.parentElement?.parentElement).length != 0) {
			$(e.target.rejectLabGrpRequest).prop("disabled", true);
			$(e.target.rejectLabGrpRequest).prop("value", "Sending...");
			$(e.target.parentElement.parentElement).find("#acceptLabGrpRequest").prop("disabled", true);
			$(e.target.parentElement.parentElement).find("#acceptLabGrpRequest").prop("value", "Sending...");
		}
		var postData = $(this).closest('form').serialize();
		var jqxhr = $.post('/dashboard/ajax/messageStatus', postData,  function (resp) {
			form$.closest('.toast-item').remove(); // remove the toast we've just clicked in
			var action = form$.attr('data-action');
			if (action === 'accept') {
				RS.defaultConfirm("Request accepted");
			} else if (action === 'reject') {
				RS.defaultConfirm("Request declined");
			}
			_displayedSpecialMessagesCount--;
		} );
		jqxhr.fail(function (){
			RS.ajaxFailed('Changing message status', false, jqxhr);
		});
	});

	// handles order-by pagination
	$('body').on("click", '.notifcnOrderBy', function(event) {
		var contentDiv$=$(this).closest('.notificationList');
		if(contentDiv$.size() == 0){
			return;
		}
		var orderBy = $(this).attr('id').split("_")[1];
		var url=createURL('/dashboard/ajax/listNotifications?orderBy='+orderBy+'&sortOrder='+'DESC');
		if (RS.webResultCache.get(url) != undefined) {
			contentDiv$.html(RS.webResultCache.get(url));
			unescapeMessageContent();
		} else {
			var jqxhr =  $.get(url, function (xhr) {
				contentDiv$.html(xhr);
				RS.webResultCache.put(url,xhr,30 * 1000);// 30 second cache
				unescapeMessageContent();
			});
			jqxhr.fail(function() {
				RS.ajaxFailed("Listing notifications", false, jxqr);
			});
		}
	});

	// opens new page of results
	$('body').on("click", '.ntfcn_pagelink', function(event) {
		var contentDiv$=$(this).closest('.notificationList');
		if(contentDiv$.size() == 0) {
			return;
		}
		var url = createURL($(this).attr('id').split("_")[1]);
		if (RS.webResultCache.get(url) != undefined) {
			contentDiv$.html(RS.webResultCache.get(url));
			unescapeMessageContent();
		} else {
			$.get(url, function (xhr) {
				contentDiv$.html(xhr);
				RS.webResultCache.put(url, xhr, 30 * 1000);
				unescapeMessageContent();
			}).fail(function() {
				RS.ajaxFailed("Listing notifications", false, jxqr);
			});
		}
	});

	// deletes all records from page
	$('body').on("click", '#deleteAllOnPageLink', function(event) {
		var contentDiv$=$(this).closest('.notificationList');
		var rows$ = $("tr.notificationRow");

		var notificnIds= getNotificnIDArrayFromRows(rows$);
		var data ={id:notificnIds, refresh:true};
		$.post(createURL('/dashboard/ajax/markAsRead'), data, function (xhr) {
			contentDiv$.html(xhr);
			unescapeMessageContent();
		}).fail(function() {
			RS.ajaxFailed("Marking notifications as read", false, jxqr);
		});
	});

	// deletes all records from page
	$('body').on("click", '#deleteAllReadLink', function(event) {

		$.post(createURL('/dashboard/ajax/delete'), function (xhr) {

		}).fail(function() {
			RS.ajaxFailed("Marking notifications as read", false, jxqr);
		});
	});



	// deletes ALL notifications for user
	$('body').on("click", '#deleteAllLink', function(event) {
		var contentDiv$ = $(this).closest('.notificationList');
		var lastTime = $('#timeOfListing').val();
		var data= {since:lastTime};
		var url = createURL('/dashboard/ajax/markAllAsRead');
		$.post(url, data, function (xhr) {
			contentDiv$.html(xhr);
		});
	});

	// handles click on 'mark as read' checkbox
	$('body').on("click", '.deleteSingleNotificn', function(event) {
		var contentDiv$=$(this).closest('.notificationList');
		var tr$= $(this).closest('tr.notificationRow');
		var notificnIds= getNotificnIDArrayFromRows(tr$);
		var postData ={
			id:notificnIds,
			refresh:false
		};
		$.post(createURL('/dashboard/ajax/markAsRead'), postData, function (xhr) { });
		tr$.hide("fade", function () {
			if( $('tr.notificationRow').filter(":visible").size() == 0 ){
				contentDiv$.html("There are no new notifications.");
			}
			// if we've deleted some, pagination links will hold notifications that
			// are now deleted.
			RS.webResultCache.clearAll();
		});
	});

	$('body').on("click", '#openNotificationDlgLink', function(e) {
		$('#notificationsDlg').dialog('open');
	});

	// set up pop-up dialog with notification listings, dialog defined in notifications_ajax.jsp
	$('#notificationsDlg').dialog({
		resizable: true,
		title: "Notifications",
		modal: true,
		autoOpen:false,
		height:500,
		minWidth:600,
		hide:'fade',
		show:'fade',
		open: function(  ) {
			// load up on dialog open
			var jxqr = $.get('/dashboard/ajax/listNotifications',function(html) {
				$('.notificationList').html(html);
				unescapeMessageContent();
			}).fail(function() {
				RS.ajaxFailed("Listing notifications", false, jxqr);
			});
		},
		close: doPoll, // refresh count after possible modification
		buttons: {
			"Close": function() {
				$(this).dialog( "close" );
			}
		}
	});
});

function unescapeMessageContent(){
	$('#notificationListContents').find('.msgContent').each(function (index){
		var currHTml = $(this).html();
		var unescapedMsg = RS.unescape(currHTml);
		$(this).html(unescapedMsg);
	});
}

function _hasUnseenSpecialMessages(pollResult) {
	return pollResult.data.specialMessageCount != _displayedSpecialMessagesCount;
}

var _displayedSpecialMessagesCount = 0;
var _cachedSpecialMessagesHtmlResponse;

function _displaySpecialMessages() {
	// html for special messages, may be already cached on the page
	var specialMessagesHtmlRequest;
	if (_cachedSpecialMessagesHtmlResponse) {
		specialMessagesHtmlRequest = $.Deferred();
		specialMessagesHtmlRequest.resolve(_cachedSpecialMessagesHtmlResponse);
	} else {
		specialMessagesHtmlRequest = $.get('/scripts/templates/specialMessages.html');
	}

	// retrieve actual messages
	var messagesRequest = $.get("/dashboard/ajax/specialMessages");

	var requestsPromise = $.when(messagesRequest, specialMessagesHtmlRequest);
	requestsPromise.done(function (messagesDataResponse, specialMessagesHtmlResponse) {
		_cachedSpecialMessagesHtmlResponse = specialMessagesHtmlResponse;

		var messagesData = messagesDataResponse[0];
		var htmlTemplates = specialMessagesHtmlResponse[0];
		$.each(messagesData.data, function (i) {
			var msg = messagesData.data[i];
			var toastCount = $('.toast-container').find("input[name='messageOrRequestId'][value='" + msg.id +"']").size();
			var found = toastCount > 0;
			if (!found) {
				var templateName = msg.messageType;
				if (msg.messageType == 'REQUEST_JOIN_LAB_GROUP' && msg.groupType == 'PROJECT_GROUP') {
					templateName = 'REQUEST_JOIN_PROJECT_GROUP'; // special UI variant for Project Groups
				}
				var divName = '#'+templateName+"-template";
				var template = $(htmlTemplates).filter(divName).html();
				var html = Mustache.render(template, msg);
				if (msg.messageType === 'GLOBAL_MESSAGE') {
					RS.notificationMsg(html);
				} else {
					RS.requestMsg(html);
				}
			}
		});
		_displayedSpecialMessagesCount = messagesData.data.length;
	});
	requestsPromise.fail(function (){
		RS.ajaxFailed('Getting special messages', false, requestsPromise);
	});
}

function _displayCommunicationStateInNonWorkspace(pollResult) {
	console.log("displaying communication in non-workspace page...");
	var notificationCount = pollResult.data.notificationCount;
	var messageCount      = pollResult.data.messageCount;

	//Update your dashboard gauge
	if (notificationCount > 0 || messageCount > 0 ) {
		$('#messageToolbar').append("<div id='comsContainer'></div>");
		if (notificationCount > 0){
			$('#comsContainer').append("<div class='commAndCountContainer'><input type='image' src='/images/notificationReceived.png' " +
				"href='#' id='openNotificationDlgLink' alt='Notifications' title='Notifications' class='messageButtonClass'></input>" +
				"<div class='commCountContainer'>" +
				"<span class='commCount'>" + notificationCount +"</span>"+
				"</div></div>");
		}
		if (messageCount > 0){
			$('#comsContainer').append("<div class='commAndCountContainer'><input type='image' src='/images/messageReceived.png' " +
				"href='#' id='openMessageDlgLink' alt='Messages' title='Messages' class='messageButtonClass'></input>" +
				"<div class='commCountContainer'>" +
				"<span class='commCount'>" + messageCount +"</span>"+
				"</div></div>");
		}
	}
}

/*
 * Polls for notification/messages counter and updates UI
 */
function doPoll() {
	$.get("/dashboard/ajax/poll", function (pollResult) {
		$('#comsContainer').remove();

		var onWorkspacePage = typeof isWorkspacePage !== 'undefined' && isWorkspacePage;
		if (!onWorkspacePage) {
				_displayCommunicationStateInNonWorkspace(pollResult);
		}

		// special messages should be displayed straight away
		if (_hasUnseenSpecialMessages(pollResult)) {
			_displaySpecialMessages();
		}
	});
}

// gets notification id from link id in form 'descriptor_XXX' where XXX is the id.
function getNotificnIDArrayFromRows(wrappedRow$) {
	return wrappedRow$.map(function (index, item) {
		return $(item).attr('id').split("_")[1];
	}).get();
}
