// @flow

export type Identifier = {|
  id: number,
  doiType: string,
  doi: string,
  associatedGlobalId: string | null,
  creatorName: string,
  state: string,
|};

declare export function useIdentifiers(): {|
  getIdentifiers: ({|
    state?: "draft" | "findable" | "registered" | null,
    isAssociated?: boolean | null,
    searchTerm?: string
  |}) => Promise<$ReadOnlyArray<Identifier>>,
  bulkRegister: ({| count: number |}) => Promise<void>,
  deleteIdentifiers: (Set<Identifier>) => Promise<void>,
|};

declare export function useIdentifiersListing({|
  state?: "draft" | "findable" | "registered" | null,
  isAssociated?: boolean | null,
  searchTerm?: string
|}): {|
  identifiers: $ReadOnlyArray<Identifier>,
  loading: boolean,
  error: Error | null,
  refreshListing: () => Promise<void>;
|};

type IdentifiersRefreshContextType = {|
  refreshListing: (() => Promise<void>) | null,
  setRefreshListing: (fn: (() => Promise<void>) | null) => void,
|};

type IdentifiersRefreshProviderProps = {|
  children: React.Node,
|};

declare var IdentifiersRefreshContext: React.Context<IdentifiersRefreshContextType>;

declare export function IdentifiersRefreshProvider(
  props: IdentifiersRefreshProviderProps
): React.Node;

declare export function useIdentifiersRefresh(): IdentifiersRefreshContextType;
