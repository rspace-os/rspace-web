//@flow

import { type Node } from "react";
import InputWrapper, {
  type InputWrapperArgs,
} from "../../../components/Inputs/InputWrapper";
import AttachmentField, {
  type AttachmentFieldArgs,
} from "../../../components/Inputs/AttachmentField";
import ChoiceField, {
  type ChoiceFieldArgs,
} from "../../../components/Inputs/ChoiceField";
import DateField, {
  type DateFieldArgs,
} from "../../../components/Inputs/DateField";
import FileField, {
  type FileFieldArgs,
} from "../../../components/Inputs/FileField";
import NumberField, {
  type NumberFieldArgs,
} from "../../../components/Inputs/NumberField";
import RadioField, {
  type RadioFieldArgs,
} from "../../../components/Inputs/RadioField";
import ReferenceField, {
  type ReferenceFieldArgs,
} from "../../../components/Inputs/ReferenceField";
import StringField, {
  type StringFieldArgs,
} from "../../../components/Inputs/StringField";
import TextField, {
  type TextFieldArgs,
} from "../../../components/Inputs/TextField";
import TimeField, {
  type TimeFieldArgs,
} from "../../../components/Inputs/TimeField";
import UriField, {
  type UriFieldArgs,
} from "../../../components/Inputs/UriField";

type FieldArgs<T: string> =
  | {| type: "Attachment", ...AttachmentFieldArgs<any> |}
  | {| type: "Choice", ...ChoiceFieldArgs<T> |}
  | {| type: "Date", ...DateFieldArgs |}
  | {| type: "File", ...FileFieldArgs |}
  | {| type: "Number", ...NumberFieldArgs |}
  | {| type: "Radio", ...RadioFieldArgs<T> |}
  | {| type: "Reference", ...ReferenceFieldArgs |}
  | {| type: "String", ...StringFieldArgs |}
  | {| type: "Text", ...TextFieldArgs |}
  | {| type: "Time", ...TimeFieldArgs |}
  | {| type: "Uri", ...UriFieldArgs |};

type CustomFieldArgs<T: string> = {|
  type:
    | "Attachment"
    | "Choice"
    | "Date"
    | "File"
    | "Number"
    | "Radio"
    | "Reference"
    | "String"
    | "Text"
    | "Time"
    | "Uri",
  ...FieldArgs<T>,
  label?: string,
  value?: any,
  error?: boolean,
  helperText?: ?string,
  maxLength?: number,
  disabled?: boolean,
  actions?: Node,
  inline?: boolean,
  explanation?: ?Node,
  required?: boolean,
|};

declare export default function CustomField<T: string>(CustomFieldArgs<T>): Node;
