// @flow

import ApiService from "../../common/InvApiService";
import {
  match,
  doNotAwait,
  omitNull,
  sameKeysAndValues,
  mapObject,
} from "../../util/Util";
import * as ArrayUtils from "../../util/ArrayUtils";
import {
  handleDetailedErrors,
  handleDetailedSuccesses,
  showToastWhilstPending,
} from "../../util/alerts";
import RsSet from "../../util/set";
import { type Editable } from "../definitions/Editable";
import {
  globalIdPatterns,
  type Id,
  type GlobalId,
  getSavedGlobalId,
} from "../definitions/BaseRecord";
import {
  type InventoryRecord,
  type ApiRecordType,
} from "../definitions/InventoryRecord";
import { type AdjustableTableRowLabel } from "../definitions/Tables";
import getRootStore from "../stores/RootStore";
import { mkAlert } from "../contexts/Alert";
import ContainerModel from "./ContainerModel";
import CacheFetcher from "./Fetcher/CacheFetcher";
import CoreFetcher from "./Fetcher/CoreFetcher";
import DynamicFetcher from "./Fetcher/DynamicFetcher";
import { type Username, type Person } from "../definitions/Person";
import Result from "./InventoryBaseRecord";
import { type Factory } from "../definitions/Factory";
import SampleModel from "./SampleModel";
import SubSampleModel, { type SubSampleAttrs } from "./SubSampleModel";
import { type TemplateAttrs } from "./TemplateModel";
import TreeModel, { type TreeAttrs } from "./TreeModel";
import { type TreeView } from "../definitions/TreeView";
import {
  action,
  computed,
  observable,
  makeObservable,
  runInAction,
} from "mobx";
import {
  type CoreFetcherArgs,
  type CoreFetcher as CoreFetcherInterface,
  type DynamicFetcher as DynamicFetcherInterface,
  type CacheFetcher as CacheFetcherInterface,
  type Search as SearchInterface,
  type AllowedTypeFilters,
  type UiConfig,
  type ResultType,
  type DeletedItems,
  type SearchView,
  type ExportOptions,
} from "../definitions/Search";
import { type Sample } from "../definitions/Sample";
import { InvalidState, UserCancelledAction } from "../../util/error";
import { type Basket } from "../definitions/Basket";
import { type SubSample } from "../definitions/SubSample";
import { noProgress } from "../../util/progress";
import {
  IsInvalid,
  IsValid,
  allAreValid,
} from "../../components/ValidatingSubmitButton";
import { type Quantity } from "../definitions/HasQuantity";

declare export const getViewGroup: (
  view: SearchView
) => "dynamic" | "cache" | "static";

type SearchArgs = {|
  fetcherParams?: CoreFetcherArgs,
  treeArgs?: TreeAttrs,
  uiConfig?: Partial<UiConfig>,
  callbacks?: {|
    setActiveResult?: (?Result) => void,
  |},
  factory: Factory,
|};

declare export default class Search implements SearchInterface {
  activeResult: ?InventoryRecord;
  processingContextActions: boolean;
  error: string;
  tree: TreeView;
  searchView: SearchView;
  dynamicFetcher: DynamicFetcherInterface;
  staticFetcher: CoreFetcherInterface;
  cacheFetcher: CacheFetcherInterface;
  alwaysFilterOut: (InventoryRecord) => boolean;
  callbacks: ?{|
    setActiveResult?: (?Result) => void,
  |};

  overrideSearchOnFilter: ?(CoreFetcherArgs) => void;

  batchEditingRecords: ?RsSet<InventoryRecord>;
  editLoading: "no" | "batch" | "single";

  canEditActiveResult: boolean;
  uiConfig: UiConfig;
  factory: Factory;

  constructor(SearchArgs): Search;

  setProcessingContextActions(value: boolean): void;

  setEditLoading(value: "no" | "batch" | "single"): void;

  get results(): Array<InventoryRecord>;

  get filteredResults(): Array<InventoryRecord>;

  get count(): number;

  get fetcher(): CoreFetcherInterface;

  get selectedResults(): Array<InventoryRecord>;

  get allSelectedAvailable(): boolean;

  get allSelectedDeleted(): boolean;

  get mixedSelectedStatus(): boolean;

  cleanUpActiveResult(
    options?: { releaseLock?: boolean },
  ): Promise<void>;

  cleanBatchEditing(): void;

  enableBatchEditing(records: RsSet<InventoryRecord>): Promise<void>;

  disableBatchEditing(): void;

  get loadingBatchEditing(): boolean;

  get batchEditingRecordsByType():
    | null
    | {| type: "container", records: RsSet<ContainerModel> |}
    | {| type: "sample", records: RsSet<SampleModel> |}
    | {| type: "subSample", records: RsSet<SubSampleModel> |}
    | {| type: "mixed", records: RsSet<Result> |};

  setActiveResult(
    result?: ?InventoryRecord,
    options?: { defaultToFirstResult?: boolean, force?: boolean }
  ): Promise<void>;

  toBench(username?: Username): void;

  deleteRecords(
    records: Array<InventoryRecord>,
    opts?: {| forceDelete?: boolean |}
  ): Promise<void>;

  updateStateAfterDelete(deletedRecords: RsSet<InventoryRecord>): void;

  offerToDeleteNowEmptySamples(deletedRecords: Array<InventoryRecord>): void;

  restoreRecords(records: Array<InventoryRecord>): Promise<void>;

  updateStateAfterRestore(restoredRecords: RsSet<InventoryRecord>): void;

  duplicateRecords(records: Array<InventoryRecord>): Promise<void>;

  splitRecord(copies: number, subsample: SubSample): Promise<void>;

  updateStateAfterSplit(subsample: InventoryRecord): void;

  replaceResult(result: Result): void;

  transferRecords(
    username: Username,
    records: Array<InventoryRecord>
  ): Promise<void>;

  updateStateAfterTransfer(
    transferredRecords: RsSet<InventoryRecord>
  ): Promise<void>;

  createTemplateFromSample(
    name: string,
    sample: Sample,
    includeContentForFields: Set<Id>
  ): Promise<void>;

  createNewSubsamples(opts: {|
    sample: Sample,
    numberOfNewSubsamples: number,
    quantityPerSubsample: Quantity,
  |}): Promise<void>;

  exportRecords(
    exportOptions: ExportOptions,
    records: Array<InventoryRecord>
  ): Promise<void>;

  setSearchView(view?: SearchView): Promise<void>;

  get globalIdsOfSearchResults(): Set<GlobalId>;

  isInResults(record: InventoryRecord): boolean;

  refetchActiveResult(recordIds: Set<GlobalId>): void;

  get enableAdvancedOptions(): boolean;

  get showBenchFilter(): boolean;

  get showTypeFilter(): boolean;

  get showStatusFilter(): boolean;

  get showOwnershipFilter(): boolean;

  get showBarcodeScan(): boolean;

  get showTagsFilter(): boolean;

  get showSavedSearches(): boolean;

  get showSavedBaskets(): boolean;

  get adjustableColumnOptions(): RsSet<AdjustableTableRowLabel>;

  setAdjustableColumn(value: AdjustableTableRowLabel, index: number): void;

  performSearch(): void;

  setPageSize(pageSize: number): void;

  setPage(pageNumber: number): Promise<void>;

  setOwner(user: ?Person, doSearch: ?boolean): void;

  setBench(user: ?Person, doSearch: ?boolean): void;

  setTypeFilter(resultType: ResultType, doSearch: ?boolean): void;

  setDeletedItems(deletedItems: DeletedItems, doSearch: ?boolean): void;

  setParentGlobalId(parentGlobalId: ?GlobalId, doSearch: ?boolean): void;

  get benchSearch(): boolean;

  onUsersBench(user: Person): boolean;

  rejectIfSearchParametersChange<T>(promise: Promise<T>): Promise<T>;

  setupAndPerformInitialSearch(params: CoreFetcherArgs): Promise<void>;

  get allowedStatusFilters(): RsSet<DeletedItems>;

  get allowedTypeFilters(): AllowedTypeFilters;

  get loading(): boolean;

  get batchEditableInstance(): Editable;

  isActiveResultTemplateOfAny<T: InventoryRecord>(records: RsSet<T>): boolean;

  currentBasket(baskets: $ReadOnlyArray<Basket>): ?Basket;
}
