// @flow

import ContentsChips from "../../Inventory/Container/Content/ContentsChips";
import { type URL, type Point, type _LINK } from "../../util/types";
import { match, classMixin, clamp } from "../../util/Util";
import * as ArrayUtils from "../../util/ArrayUtils";
import { selectColor } from "../../util/colors";
import RsSet from "../../util/set";
import {
  type Container,
  type ContainerType,
  type Location,
  type GridLayout,
  type ContentSummary,
  cTypeToDefaultSearchView,
  layoutToLabels,
} from "../definitions/Container";
import {
  type AllowedTypeFilters,
  type Search as SearchInterface,
  type CoreFetcherArgs,
} from "../definitions/Search";
import {
  type HasEditableFields,
  type HasUneditableFields,
} from "../definitions/Editable";
import {
  type InventoryRecord,
  type RecordType,
  type Action,
  type SharingMode,
  type CreateOption,
} from "../definitions/InventoryRecord";
import { type Id, type GlobalId, inventoryRecordTypeLabels } from "../definitions/BaseRecord";
import { type RecordDetails } from "../definitions/Record";
import { type AdjustableTableRowOptions } from "../definitions/Tables";
import {
  type Permissioned,
  mapPermissioned,
} from "../definitions/PermissionedData";
import { type BlobUrl } from "../../util/types";
import getRootStore from "../stores/RootStore";
import { type AttachmentJson } from "./AttachmentModel";
import { type ExtraFieldAttrs } from "../definitions/ExtraField";
import LocationModel, { type LocationAttrs } from "./LocationModel";
import { Movable } from "./Movable";
import { type PersonAttrs } from "../definitions/Person";
import Result, {
  defaultVisibleResultFields,
  defaultEditableResultFields,
  RESULT_FIELDS,
  type ResultEditableFields,
  type ResultUneditableFields,
} from "./Result";
import { type Factory } from "../definitions/Factory";
import ResultCollection, {
  type ResultCollectionEditableFields,
} from "./ResultCollection";
import Search from "./Search";
import SubSampleModel, { type SubSampleAttrs } from "./SubSampleModel";
import {
  action,
  computed,
  observable,
  override,
  makeObservable,
  runInAction,
} from "mobx";
import React, { type Node } from "react";
import ListContainerIllustration from "../../assets/graphics/RecordTypeGraphics/HeaderIllustrations/ListContainer";
import GridContainerIllustration from "../../assets/graphics/RecordTypeGraphics/HeaderIllustrations/GridContainer";
import VisualContainerIllustration from "../../assets/graphics/RecordTypeGraphics/HeaderIllustrations/VisualContainer";
import { type BarcodeAttrs } from "../definitions/Barcode";
import { type SubSample } from "../definitions/SubSample";
import { type SharedWithGroup } from "../definitions/Group";
import type { IdentifierAttrs } from "../definitions/Identifier";
import { type Tag } from "../definitions/Tag";
import { pick } from "../../util/unsafeUtils";
import {
  IsInvalid,
  IsValid,
  type ValidationResult,
  allAreValid,
} from "../../components/ValidatingSubmitButton";
import * as Parsers from "../../util/parsers";
import { type Person } from "../definitions/Person";
import { type HasLocation } from "../definitions/HasLocation";

type ContainerEditableFields = {
  ...ResultEditableFields,
  ...
};

type ContainerUneditableFields = {
  ...ResultUneditableFields,
  location: InventoryRecord,
};

export type ContainerInContainerParams = {
  parentContainers?: Array<{ id: Id }>,
  parentLocation?: Location,
};

export type ContainerAttrs = {|
  id: ?Id,
  type: string,
  globalId: ?GlobalId,
  name: string,
  canStoreContainers: boolean,
  canStoreSamples: boolean,
  description: string,
  permittedActions: Array<Action>,
  quantity: null,
  extraFields?: Array<ExtraFieldAttrs>,
  tags: ?Array<Tag>,
  locations: $ReadOnlyArray<{
    ...$Diff<LocationAttrs, {| parentContainer: mixed, content: mixed |}>,
    content: ?(ContainerAttrs | SubSampleAttrs),
  }>,
  gridLayout: ?GridLayout,
  cType: string,
  locationsCount: ?number,
  contentSummary: ?ContentSummary,
  image?: string,
  parentContainers: Array<ContainerAttrs>,
  lastNonWorkbenchParent: ?ContainerAttrs,
  lastMoveDate: ?Date,
  owner: ?PersonAttrs,
  created: ?string,
  lastModified: ?string,
  modifiedByFullName: ?string,
  deleted: boolean,
  attachments: Array<AttachmentJson>,
  barcodes: Array<BarcodeAttrs>,
  identifiers: Array<IdentifierAttrs>,
  sharingMode: SharingMode,
  sharedWith: Array<SharedWithGroup>,
  _links: Array<_LINK>,
|};

declare export default class ContainerModel
  extends Result
  implements
    Container,
    HasEditableFields<ContainerEditableFields>,
    HasUneditableFields<ContainerUneditableFields>,
    HasLocation
{
  canStoreContainers: boolean;
  canStoreSamples: boolean;
  quantity: null;
  locations: ?Array<Location>;
  unchangedLocationsIds: Array<number>;
  locationsImage: ?BlobUrl;
  gridLayout: ?GridLayout;
  newBase64LocationsImage: ?string;
  cType: ContainerType;
  selectionMode: boolean;
  selectionStart: Point;
  selectionEnd: Point;
  initializedLocations: boolean;
  locationsCount: number;
  contentSummary: Permissioned<ContentSummary>;
  contentSearch: SearchInterface;
  parentContainers: Array<Container>;
  parentLocation: ?Location;
  siblingColorCache: Map<Id, string>;

  constructor(factory: Factory, params?: ContainerAttrs): ContainerModel;

  populateFromJson(factory: Factory, params: any, defaultParams?: ?any): void;

  get allowedTypeFilters(): AllowedTypeFilters;
  get recordType(): RecordType;
  get contentCount(): Permissioned<number>;
  get hasEnoughSpace(): ?boolean;
  get isFull(): ?boolean;
  get results(): Array<Container | SubSample>;
  get movingIntoItself(): boolean;
  get canStoreRecords(): boolean;
  get canStoreRecordsFromInfoData(): boolean;
  get availableLocations(): Permissioned<number>;
  get canStore(): Array<"containers" | "samples">;
  get dimensions(): ?[number | "", number | ""];
  get selectedLocations(): ?Array<Location>;
  get selectedResults(): Array<Container | SubSample>;
  shallowSelected(search: Search): Array<Location>;
  shallowUnselected(search: Search): Array<Location>;
  get rows(): Array<{ value: number, label: string | number }>;
  get columns(): Array<{
    value: number,
    label: string | number,
  }>;
  get sortedLocations(): ?Array<Location>;
  get getLocationsForApi(): Array<
    | {|
        id: ?number,
        coordX: ?number,
        coordY: ?number,
        newLocationRequest?: boolean,
      |}
    | {|
        id: number,
        deleteLocationRequest: boolean,
      |}>;
  get siblingGroups(): RsSet<Id>;
  getColor(sampleId: Id): ?string;
  updateLocationsCount(delta: number): void;
  setOrganization(organization: ContainerType): void;
  updateFieldsState(): void;
  setFieldsStateForBatchEditing(): void;
  fetchAdditionalInfo(
    silent?: boolean,
    queryParameters?: URLSearchParams
  ): Promise<void>;
  findLocation(col: number, row: number): ?Location;
  toggleAllLocations(value: boolean): void;
  get paramsForBackend(): any;
  startSelection(
    event: MouseEvent,
    padding?: {|
      left: number,
      top: number,
      right: number,
      bottom: number,
    |}
  ): void;
  moveSelection(
    event: MouseEvent,
    padding?: {|
      left: number,
      top: number,
      right: number,
      bottom: number,
    |}
  ): void;
  stopSelection(search: SearchInterface): void;
  onSelect(location: Location, search: SearchInterface): void;
  deleteSortedLocation(index: number): void;
  get recordTypeLabel(): string;
  get containerTypeLabel(): string;
  get cardTypeLabel(): string;
  get hasSelectedLocation(): boolean;
  get hasSelectedRecord(): boolean;
  contextMenuDisabled(): ?string;
  get fieldNamesInUse(): Array<string>;
  adjustableTableOptions(): AdjustableTableRowOptions<string>;
  get iconName(): string;
  get showNewlyCreatedRecordSearchParams(): CoreFetcherArgs;
  get illustration(): Node;
  validate(): ValidationResult;
  get children(): Array<InventoryRecord>;
  loadChildren(): void;
  get canNavigateToChildren(): boolean;
  get recordDetails(): RecordDetails;
  get fieldValues(): ContainerEditableFields & ContainerUneditableFields;
  get supportsBatchEditing(): boolean;
  get noValueLabel(): {[key in keyof ContainerEditableFields]: ?string} & {[key in keyof ContainerUneditableFields]: ?string};
  get permalinkURL(): ?URL;
  refreshAssociatedSearch(): void;
  showTopLinkInBreadcrumbs(): boolean;
  get usableInLoM(): boolean;
  get beingCreatedInContainer(): boolean;
  get inContainerParams(): ContainerInContainerParams;
  get dataAttachedToRecordCreatedAnaylticsEvent(): {};
  get createOptions(): $ReadOnlyArray<CreateOption>;

  +immediateParentContainer: Container | null;
  +rootParentContainer: Container | null;
  +allParentContainers: $ReadOnlyArray<Container>;
  +isInWorkbench: boolean;
  +isOnWorkbench: boolean;
  isInWorkbenchOfUser(user: Person): boolean;
  isOnWorkbenchOfUser(user: Person): boolean;
  +lastNonWorkbenchParent: Container | null;
}

type BatchContainerEditableFields = {
  ...ResultCollectionEditableFields,
  ...
};

declare export class ContainerCollection
  extends ResultCollection<ContainerModel>
  implements HasEditableFields<BatchContainerEditableFields>
{
  constructor(containers: RsSet<ContainerModel>): ContainerCollection;
  get fieldValues(): BatchContainerEditableFields;
  get noValueLabel(): {[key in keyof BatchContainerEditableFields]: ?string};
  setFieldsDirty(newFieldValues: any): void;
  setFieldEditable(fieldName: string, value: boolean): void;
}
