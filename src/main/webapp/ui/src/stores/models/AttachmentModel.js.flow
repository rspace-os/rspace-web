//@flow

import {
  observable,
  action,
  computed,
  makeObservable,
  runInAction,
} from "mobx";
import { type URL as Url, type _LINK } from "../../util/types";
import { mkAlert } from "../contexts/Alert";
import ApiService from "../../common/InvApiService";
import { type RecordDetails } from "../../stores/definitions/Record";
import getRootStore from "../stores/RootStore";
import { justFilenameExtension } from "../../util/files";
import { type Person } from "../definitions/Person";
import { type Attachment } from "../definitions/Attachment";
import { type GlobalId, type Id } from "../definitions/BaseRecord";
import { type GalleryFile } from "../../eln/gallery/useGalleryListing";
import { type LinkableRecord } from "../definitions/LinkableRecord";

type AttachmentId = ?number;
type Bytes = number;

type CommonAttrs = {|
  id: AttachmentId,
  name: string,
  size: Bytes,
|};

type FromServer = {|
  ...CommonAttrs,
  globalId: GlobalId,
  contentMimeType: string,
  _links: Array<_LINK>,
|};

type FromServerFromGallery = {|
  ...FromServer,
  mediaFileGlobalId: string,
|};

export type AttachmentJson = FromServer | FromServerFromGallery;

type FromUpload = {|
  ...CommonAttrs,
  file: File,
|};

type FromGallery = {|
  ...CommonAttrs,
  galleryId: string,
  downloadHref: null | (() => Promise<Url>),
|};

declare class LinkableGalleryFile implements LinkableRecord {
  globalId: ?string;
  id: ?number;
  name: string;

  constructor({|
    id: number,
    globalId: string,
    name: string,
  |}): LinkableGalleryFile;

  get recordTypeLabel(): string;
  get iconName(): string;
  get permalinkURL(): string;
}

declare export class ExistingAttachment implements Attachment {
  id: AttachmentId;
  globalId: ?GlobalId;
  name: string;
  size: Bytes;
  link: ?Url;
  file: ?File;
  imageLink: ?Url;
  chemicalString: string;
  removed: boolean;
  loadingImage: boolean;
  loadingString: boolean;
  contentMimeType: string;
  onRemoveCallback: (Attachment) => void;
  permalinkURL: ?Url;
  owner: ?Person;

  constructor(
    attrs: FromServer,
    permalinkURL: ?Url,
    onRemoveCallback: (Attachment) => void
  ): ExistingAttachment;
  getFile(): Promise<File>;
  setLoadingImage(value: boolean): void;
  setLoadingString(value: boolean): void;
  setImageLink(): Promise<void>;
  createAuthenticatedLink(): Promise<Url>;
  revokeAuthenticatedLink(link: Url): void;
  setChemicalString(chemicalString: string): void;
  createChemicalPreview(): Promise<void>;
  revokeChemicalPreview(): void;
  remove(): void;
  download(): Promise<void>;
  fetchChemicalImage(): Promise<Blob>;
  fetchChemicalString(): Promise<void>;
  get cardTypeLabel(): string;
  get deleted(): boolean;
  get recordTypeLabel(): string;
  get iconName(): string;
  get isImageFile(): boolean;
  get isChemicalFile(): boolean;
  get hasId(): boolean;
  get chemistrySupported(): boolean;
  get previewSupported(): boolean;
  get recordDetails(): RecordDetails;
  save(_parentGlobalId: GlobalId): Promise<void>;
}

declare export class ExistingAttachmentFromGallery extends ExistingAttachment {
  mediaFileGlobalId: string;

  constructor(
    attrs: FromServerFromGallery,
    permalinkURL: ?Url,
    onRemoveCallback: (Attachment) => void
  ): ExistingAttachmentFromGallery;

  get recordDetails(): RecordDetails;
}

declare export function newExistingAttachment(
  attrs: AttachmentJson,
  permalinkURL: ?Url,
  onRemoveCallback: (Attachment) => void
): ExistingAttachment;

declare export class NewlyUploadedAttachment implements Attachment {
  id: AttachmentId;
  globalId: ?GlobalId;
  name: string;
  size: Bytes;
  link: ?Url;
  file: ?File;
  imageLink: ?Url;
  chemicalString: string;
  removed: boolean;
  loadingImage: boolean;
  loadingString: boolean;
  onRemoveCallback: (Attachment) => void;
  permalinkURL: ?Url;
  owner: ?Person;

  constructor(
    attrs: FromUpload,
    permalinkURL: ?Url,
    onRemoveCallback: (Attachment) => void
  ): NewlyUploadedAttachment;

  getFile(): Promise<File>;
  setLoadingImage(value: boolean): void;
  setLoadingString(value: boolean): void;
  setImageLink(): Promise<void>;
  createAuthenticatedLink(): Promise<Url>;
  revokeAuthenticatedLink(link: Url): void;
  setChemicalString(chemicalString: string): void;
  createChemicalPreview(): Promise<void>;
  revokeChemicalPreview(): void;
  remove(): void;
  download(): Promise<void>;
  fetchChemicalImage(): Promise<Blob>;
  fetchChemicalString(): Promise<void>;
  get cardTypeLabel(): string;
  get deleted(): boolean;
  get recordTypeLabel(): string;
  get iconName(): string;
  get isImageFile(): boolean;
  get isChemicalFile(): boolean;
  get hasId(): boolean;
  get chemistrySupported(): boolean;
  get previewSupported(): boolean;
  get recordDetails(): RecordDetails;
  save(parentGlobalId: GlobalId): Promise<void>;
}

declare export const newAttachment: (
  file: File,
  permalinkURL: ?Url,
  onRemoveCallback: (Attachment) => void
) => NewlyUploadedAttachment;

declare export class NewGalleryAttachment implements Attachment {
  galleryId: string;
  name: string;
  size: Bytes;
  removed: boolean;
  onRemoveCallback: (Attachment) => void;
  permalinkURL: ?Url;
  downloadHref: null | (() => Promise<Url>);

  globalId: ?GlobalId;
  id: Id;
  imageLink: ?Url;
  owner: ?Person;
  loadingImage: boolean;
  loadingString: boolean;
  chemicalString: string;

  constructor(attrs: FromGallery, onRemoveCallback: (Attachment) => void): NewGalleryAttachment;
  getFile(): Promise<File>;
  remove(): void;
  download(): Promise<void>;
  createChemicalPreview(): Promise<void>;
  revokeChemicalPreview(): void;
  setImageLink(): Promise<void>;
  revokeAuthenticatedLink(): void;
  get isChemicalFile(): boolean;
  get chemistrySupported(): boolean;
  get previewSupported(): boolean;
  get cardTypeLabel(): string;
  get deleted(): boolean;
  get recordTypeLabel(): string;
  get iconName(): string;
  get recordDetails(): RecordDetails;
  save(parentGlobalId: GlobalId): Promise<void>;
}

declare export const newGalleryAttachment: (
  file: GalleryFile,
  onRemoveCallback: (Attachment) => void
) => NewGalleryAttachment;
