import {
  type BarcodeRecord,
  type PersistedBarcodeAttrs,
  type GeneratedBarcodeAttrs,
} from "../definitions/Barcode";
import React from "react";
import { makeObservable, observable, computed, action } from "mobx";
import { type Id } from "../definitions/BaseRecord";
import { type URL } from "../../util/types";
import ApiService from "../../common/InvApiService";

function fetchImage(url: URL, description: string): Promise<File> {
  return ApiService.query<Blob>(url, new URLSearchParams(), true).then(
    ({ data }) => {
      return new File([data], description, { type: "image/png" });
    }
  );
}

/*
 * This class models, for the purposes of displaying in the UI, any barcode
 * stored in the Inventory system; either generated by us or having been read
 * from some existing barcode in a lab.
 */
export class PersistedBarcode implements BarcodeRecord {
  id: Id;
  data: BarcodeValue;
  description: string;
  newBarcodeRequest: boolean;
  deleteBarcodeRequest: boolean;
  imageUrl: ?URL;
  image: ?File;

  constructor(attrs: PersistedBarcodeAttrs) {
    makeObservable(this, {
      id: observable,
      data: observable,
      description: observable,
      imageUrl: observable,
      image: observable,
      markAsDeleted: action,
      setDescription: action,
      paramsForBackend: computed,
      isDeleted: computed,
    });
    if (attrs.newBarcodeRequest) {
      this.id = null;
      this.newBarcodeRequest = true;
      this.deleteBarcodeRequest = false;
      this.description = attrs.description;
    } else if (attrs.deleteBarcodeRequest) {
      this.id = attrs.id;
      this.newBarcodeRequest = false;
      this.deleteBarcodeRequest = true;
      this.description = attrs.description;
      this.imageUrl = attrs.imageUrl;
    } else {
      this.id = attrs.id;
      this.newBarcodeRequest = false;
      this.deleteBarcodeRequest = false;
      this.description = attrs.description;

      this.image = null;
      const imageUrl = attrs._links.find(
        ({ rel }) => rel === "enclosure"
      )?.link;
      this.imageUrl = imageUrl;
    }
    this.data = attrs.data;
  }

  fetchImage(): Promise<File> {
    if (!this.imageUrl) return Promise.reject();
    return fetchImage(this.imageUrl, this.description);
  }

  markAsDeleted(): void {
    this.deleteBarcodeRequest = true;
  }

  deletedCopy(): ?BarcodeRecord {
    if (this.id === null) return null;
    return new PersistedBarcode({
      id: this.id,
      deleteBarcodeRequest: true,
      data: this.data,
      description: this.description,
      imageUrl: this.imageUrl,
    });
  }

  get paramsForBackend(): object {
    const params: {
      newBarcodeRequest?: true;
      deleteBarcodeRequest?: true;
    } = {
      id: this.id,
      data: this.data,
      description: this.description,
    };
    if (this.newBarcodeRequest) params.newBarcodeRequest = true;
    if (this.deleteBarcodeRequest) params.deleteBarcodeRequest = true;
    return params;
  }

  setDescription(value: string): void {
    this.description = value;
  }

  get isDeleted(): boolean {
    return this.deleteBarcodeRequest;
  }

  get isDeletable(): boolean {
    return true;
  }

  get descriptionIsEditable(): boolean {
    return true;
  }

  get renderedDescription(): React.ReactNode {
    return <>{this.description}</>;
  }
}

export class GeneratedBarcode implements BarcodeRecord {
  data: string;
  description: string;
  imageUrl: ?URL;
  image: ?File;

  constructor(attrs: GeneratedBarcodeAttrs) {
    makeObservable(this, {
      data: observable,
      description: observable,
      imageUrl: observable,
      image: observable,
      paramsForBackend: computed,
      isDeleted: computed,
    });
    this.data = attrs.data;
    this.description = `Generated by RSpace: ${this.data}`;
    this.imageUrl = `barcodes?content=${this.data}&barcodeType=QR`;
  }

  fetchImage(): Promise<File> {
    if (!this.imageUrl) return Promise.reject();
    return fetchImage(this.imageUrl, this.description);
  }

  markAsDeleted(): void {
    throw new Error("Cannot deleted generated barcodes");
  }

  deletedCopy(): ?BarcodeRecord {
    throw new Error("Cannot delete generated barcodes");
  }

  get paramsForBackend(): {} {
    throw new Error("Cannot serialise generated barcodes");
  }

  // eslint-disable-next-line no-unused-vars
  setDescription(value: string): void {
    throw new Error("Cannot modify the description of a generated barcode");
  }

  get isDeleted(): boolean {
    return false;
  }

  get isDeletable(): boolean {
    return false;
  }

  get descriptionIsEditable(): boolean {
    return false;
  }

  get renderedDescription(): Node {
    return (
      <>
        Generated By RSpace:
        <br />
        {this.data}
      </>
    );
  }
}
