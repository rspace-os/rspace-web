//@flow

import { computed, makeObservable, observable, override } from "mobx";
import getRootStore from "../stores/RootStore";
import Result, {
  type ResultEditableFields,
  type ResultUneditableFields,
} from "./Result";
import { type Factory } from "../definitions/Factory";
import { type UnitCategory } from "../stores/UnitStore";
import { type AdjustableTableRowOptions } from "../definitions/Tables";
import {
  type HasEditableFields,
  type HasUneditableFields,
} from "../definitions/Editable";

export type Quantity = {
  numericValue: number | "",
  unitId: number,
};

export type RecordWithQuantityEditableFields = {
  ...ResultEditableFields,
  quantity: ?Quantity,
  ...
};

export type RecordWithQuantityUneditableFields = {
  ...ResultUneditableFields,
  ...
};

declare export const getUnitId: (q: ?Quantity) => number;
declare export const getValue: (q: ?Quantity) => number;
declare export const getQuantityUnitLabel: (q: ?Quantity) => string;
declare export const getLabel: (q: ?Quantity) => string;

declare export default class RecordWithQuantity
  extends Result
  implements
    HasEditableFields<RecordWithQuantityEditableFields>,
    HasUneditableFields<RecordWithQuantityUneditableFields>
{
  quantity: RecordWithQuantityEditableFields["quantity"];

  constructor(factory: Factory, params: { ... }): RecordWithQuantity;

  populateFromJson(factory: Factory, params: any, defaultParams: ?any): void;

  get quantityCategory(): UnitCategory;
  get quantityUnitId(): number;
  get quantityValue(): number;
  get quantityLabel(): string;
  get quantityUnitLabel(): string;
  adjustableTableOptions(): AdjustableTableRowOptions<string>;
  get fieldValues(): RecordWithQuantityEditableFields & RecordWithQuantityUneditableFields;
  get noValueLabel(): {[key in keyof RecordWithQuantityEditableFields]: ?string} & {[key in keyof RecordWithQuantityUneditableFields]: ?string};
}
