//@flow

import { observable, computed, action, makeObservable } from "mobx";
import {
  type GeoLocationAttrs,
  type GeoLocation,
  type GeoLocationBox,
  type GeoLocationPolygon,
  type PolygonPoint,
} from "../definitions/GeoLocation";

declare export const pointComplete: (point: PolygonPoint) => boolean;

declare export const boxComplete: (box: GeoLocationBox) => boolean;

declare export class GeoLocationPolygonModel implements GeoLocationPolygon {
  +points: Array<{| polygonPoint: PolygonPoint |}>;

  constructor(points: Array<{| polygonPoint: PolygonPoint |}>): GeoLocationPolygonModel;

  get length(): number;
  get(i: number): ?{| polygonPoint: PolygonPoint |};
  set(i: number, key: $Keys<PolygonPoint>, value: string): void;
  mapPoints<T>(f: (PolygonPoint, number) => T): Array<T>;
  addAnotherPoint(i: number): void;
  removePoint(i: number): void;
  get isValid(): boolean;
  get empty(): boolean;
  toJson(): mixed;
}

declare export default class GeoLocationModel implements GeoLocation {
  geoLocationBox: GeoLocationBox;
  geoLocationPlace: string;
  geoLocationPoint: PolygonPoint;
  geoLocationPolygon: GeoLocationPolygon;
  geoLocationInPolygonPoint: PolygonPoint;

  constructor(attrs: GeoLocationAttrs): GeoLocationModel;

  get placeComplete(): boolean;
  get pointIncomplete(): boolean;
  get inPolygonPointIncomplete(): boolean;
  get boxIncomplete(): boolean;
  get polygonEmpty(): boolean;
  get polygonIncomplete(): boolean;
  get isValid(): boolean;
  toJson(): { ... };
}

