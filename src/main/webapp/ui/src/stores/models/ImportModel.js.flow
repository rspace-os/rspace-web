// @flow

import ApiService from "../../common/InvApiService";
import { match, toTitleCase, filterObject } from "../../util/Util";
import * as ArrayUtils from "../../util/ArrayUtils";
import { filenameExceptExtension } from "../../util/files";
import { showToastWhilstPending } from "../../util/alerts";
import RsSet from "../../util/set";
import StateMachine from "../../util/stateMachine";
import getRootStore from "../stores/RootStore";
import MemoisedFactory from "./Factory/MemoisedFactory";
import { mkAlert } from "../contexts/Alert";
import {
  FieldTypes,
  fieldTypeToApiString,
  apiStringToFieldType,
  compatibleFieldTypes,
  type FieldType,
} from "./FieldTypes";
import { type ImportRecordType } from "../stores/ImportStore";
import TemplateModel from "./TemplateModel";
import {
  computed,
  action,
  observable,
  makeObservable,
  runInAction,
} from "mobx";
import { parseString } from "../../util/parsers";
import { type Field as TemplateField } from "../definitions/Field";
import { pick } from "../../util/unsafeUtils";
import Result from "../../util/result";

declare export const Fields: { [string]: symbol };

type Field = $Values<typeof Fields>;

declare export const getTypeOfField: (field: Field) => ?FieldType;

declare const transitionMapping: { [string]: Set<string> };
export type State = $Keys<typeof transitionMapping>;

type ColumnName = string;

declare export class ColumnFieldMap {
  selected: boolean;
  columnName: ColumnName;
  field: Field;
  fieldName: string;
  fieldType: FieldType;
  chosenFieldType: FieldType;
  quantityUnitId: ?number;
  options: ?Array<string>;
  fieldChangeCallback: (oldField: Field, newField: Field) => void;
  isNameUnique: (ColumnFieldMap) => boolean;
  recordType: ImportRecordType;
  columnsWithoutBlankValue: Array<ColumnName>;

  constructor({
    selected: boolean,
    columnName: ColumnName,
    field: Field,
    fieldName: string,
    fieldType: FieldType,
    quantityUnitId: ?number,
    options: ?Array<string>,
    fieldChangeCallback: (oldField: Field, newField: Field) => void,
    isNameUnique: (ColumnFieldMap) => boolean,
    recordType: ImportRecordType,
    columnsWithoutBlankValue: Array<ColumnName>,
  }): ColumnFieldMap;

  toggleSelected(value?: boolean): void;

  setField(newField: Field): void;

  updateField(newField: Field): void;

  setChosenFieldType(fieldType: FieldType): void;

  setFieldName(value: string): void;

  get allValidTypes(): Array<FieldType>;

  typeIsCompatibleWithField(field: Field): boolean;

  isCompatibleWithField(field: Field): boolean;

  get validFieldName(): boolean;

  get valid(): boolean;

  get fieldsByRecordType(): { [string]: symbol };
}

declare export default class Import {
  containersFile: ?File;
  samplesFile: ?File;
  subSamplesFile: ?File;

  fieldNameForColumnName: { [string]: string };

  createNewTemplate: boolean;

  templateName: string;

  templateInfo: ?TemplateModel;

  template: ?TemplateModel;

  containersMappings: Array<ColumnFieldMap>;
  samplesMappings: Array<ColumnFieldMap>;
  subSamplesMappings: Array<ColumnFieldMap>;

  state: StateMachine<$Keys<typeof transitionMapping>>;

  recordType: ImportRecordType;

  constructor(recordType: ImportRecordType): Import;

  setCurrentRecordType(value: ImportRecordType): void;

  setTemplateName(value: string): void;

  setCreateNewTemplate(value: boolean): void;

  setTemplate(template: ?TemplateModel): void;

  setFile(file: ?File): void;

  resetMappingsByRecordType(): void;

  resetAllMappings(): void;

  resetAllLoadedFiles(): void;

  clearFile(): void;

  setDefaultUnitId(id?: number): void;

  get isContainersImport(): boolean;

  get isSamplesImport(): boolean;

  get isSubSamplesImport(): boolean;

  get nameFieldIsSelected(): boolean;

  get quantityFieldIsSelected(): boolean;

  get validTemplateName(): boolean;

  get anyParentSamplesFieldIsSelected(): boolean;

  get unconvertedFieldIsSelected(): boolean;

  get parentContainersImportIdUndefined(): boolean;

  get parentSamplesImportIdUndefined(): boolean;

  validateMappings(mappings: Array<ColumnFieldMap>): boolean;

  get fileByRecordType(): ?File;

  get someFileSubmitted(): boolean;

  get fileByRecordTypeLoaded(): boolean;

  get labelByRecordType(): string;

  get mappingsByRecordType(): Array<ColumnFieldMap>;

  get containersSubmittable(): boolean;

  get samplesSubmittable(): boolean;

  get subSamplesSubmittable(): boolean;

  get importSubmittable(): boolean;

  toggleSelection(): void;

  parseCsvFile(): Promise<void>;

  get fileErrorMessage(): string;

  fieldIsChosen(field: Field): boolean;

  transformTemplateInfoForSubmission(): {
    fields: Array<any>,
    name: string,
    ...
  };

  findField(mappings: Array<ColumnFieldMap>, field: Field): ?ColumnFieldMap;

  findParsedColumnName(mappings: Array<ColumnFieldMap>, field: Field): ?string;

  makeMappingsObject(mappings: Array<ColumnFieldMap>): {
    [string]: string,
  };

  importFiles(): Promise<void>;

  isNameUnique(columnFieldMap: ColumnFieldMap): boolean;

  get importMatchesExistingTemplate(): ?(
    | {| matches: false, reason: string |}
    | {| matches: true |}
  );

  byRecordType(prop: string): any;

  updateRecordType(urlSearchParams: URLSearchParams): void;
}

