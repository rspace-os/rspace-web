// @flow

import { mkAlert } from "../contexts/Alert";
import { type _LINK } from "../../util/types";
import ApiService from "../../common/InvApiService";
import RsSet from "../../util/set";
import {
  type HasEditableFields,
  type HasUneditableFields,
} from "../definitions/Editable";
import { type Id, type GlobalId, inventoryRecordTypeLabels } from "../definitions/BaseRecord";
import { type RecordDetails } from "../definitions/Record";
import {
  type RecordType,
  type Action,
  type InventoryRecord,
  type CreateOption,
} from "../definitions/InventoryRecord";
import { type AdjustableTableRowOptions } from "../definitions/Tables";
import getRootStore from "../stores/RootStore";
import { type AttachmentJson } from "./AttachmentModel";
import ContainerModel, { type ContainerAttrs } from "./ContainerModel";
import { type ExtraFieldAttrs } from "../definitions/ExtraField";
import RecordWithQuantity, {
  type RecordWithQuantityEditableFields,
  type RecordWithQuantityUneditableFields,
  type Quantity,
  getValue,
  getUnitId,
} from "./RecordWithQuantity";
import { type PersonId, type PersonAttrs } from "../definitions/Person";
import { type Factory } from "../definitions/Factory";
import ResultCollection, {
  type ResultCollectionEditableFields,
} from "./ResultCollection";
import SampleModel, { type SampleAttrs } from "./SampleModel";
import {
  action,
  computed,
  observable,
  override,
  makeObservable,
  runInAction,
} from "mobx";
import { type Alias, type Sample } from "../definitions/Sample";
import {
  RESULT_FIELDS,
  defaultVisibleResultFields,
  defaultEditableResultFields,
} from "./Result";
import React, { type Node } from "react";
import SubSampleIllustration from "../../assets/graphics/RecordTypeGraphics/HeaderIllustrations/SubSample";
import { type SubSample } from "../definitions/SubSample";
import { type BarcodeAttrs } from "../definitions/Barcode";
import type { IdentifierAttrs } from "../definitions/Identifier";
import { pick } from "../../util/unsafeUtils";
import {
  IsInvalid,
  IsValid,
  type ValidationResult,
} from "../../components/ValidatingSubmitButton";
import { type Container } from "../definitions/Container";
import { type Person } from "../definitions/Person";
import { type HasLocation } from "../definitions/HasLocation";

type SubSampleEditableFields = {
  ...RecordWithQuantityEditableFields,
};

type SubSampleUneditableFields = {
  ...RecordWithQuantityUneditableFields,
  sample: Sample,
  location: InventoryRecord,
  ...
};

export type Note = {|
  id?: number,
  createdBy: {
    firstName: string,
    lastName: string,
    id: PersonId,
  },
  created: string,
  content: string,
|};

export type SubSampleAttrs = {|
  id: Id,
  type: string,
  globalId: ?GlobalId,
  name?: string,
  quantity: Quantity,
  extraFields?: Array<ExtraFieldAttrs>,
  description?: string,
  permittedActions: Array<Action>,
  tags: ?string,
  notes?: Array<Note>,
  iconId?: string,
  newBase64Image?: string,
  image?: string,
  parentContainers: Array<ContainerAttrs>,
  lastNonWorkbenchParent: ?string,
  lastMoveDate: ?Date,
  sample?: SampleAttrs | SampleModel,
  owner: ?PersonAttrs,
  created: ?string,
  lastModified: ?string,
  modifiedByFullName: ?string,
  deleted: boolean,
  attachments: Array<AttachmentJson>,
  barcodes: Array<BarcodeAttrs>,
  identifiers: Array<IdentifierAttrs>,
  _links: Array<_LINK>,
|};

declare export default class SubSampleModel
  extends RecordWithQuantity
  implements
    SubSample,
    HasEditableFields<SubSampleEditableFields>,
    HasUneditableFields<SubSampleUneditableFields>,
    HasLocation
{
  notes: Array<Note>;
  sample: SampleModel;
  parentContainers: Array<ContainerModel>;
  parentLocation: ?Location;
  createOptionsParametersState: {|
    split: {| key: "split",  copies: number |}
  |};

  constructor(factory: Factory, params: SubSampleAttrs): SubSampleModel;

  populateFromJson(
    factory: Factory,
    params: any,
    defaultParams?: ?any
  ): void;

  get recordType(): RecordType;
  get alias(): Alias;
  get paramsForBackend(): any;
  updateFieldsState(): void;
  setFieldsStateForBatchEditing(): void;
  createNote(params: {| content: string |}): Promise<void>;
  get cardTypeLabel(): string;
  get recordTypeLabel(): string;
  get fieldNamesInUse(): Array<string>;
  adjustableTableOptions(): AdjustableTableRowOptions<string>;
  update(refresh?: boolean): Promise<void>;
  fetchAdditionalInfo(silent?: boolean): Promise<void>;
  get iconName(): string;
  get illustration(): Node;
  get recordDetails(): RecordDetails;
  get fieldValues(): SubSampleEditableFields & SubSampleUneditableFields;
  get supportsBatchEditing(): boolean;
  get noValueLabel(): {[key in keyof SubSampleEditableFields]: ?string} & {[key in keyof SubSampleUneditableFields]: ?string};
  validate(): ValidationResult;
  get usableInLoM(): boolean;

  +immediateParentContainer: Container | null;
  +rootParentContainer: Container | null;
  +allParentContainers: $ReadOnlyArray<Container>;
  +isOnWorkbench: boolean;
  +isDirectlyOnWorkbench: boolean;
  isOnWorkbenchOfUser(user: Person): boolean;
  isDirectlyOnWorkbenchOfUser(user: Person): boolean;
  +lastNonWorkbenchParent: Container | null;
  get lastMoveDate(): ?Date;
}

type BatchSubSampleEditableFields = ResultCollectionEditableFields &
  $Diff<SubSampleEditableFields, {| name: mixed |}>;

declare export class SubSampleCollection
  extends ResultCollection<SubSampleModel>
  implements HasEditableFields<BatchSubSampleEditableFields>
{
  constructor(subsamples: RsSet<SubSampleModel>): SubSampleCollection;
  get sameQuantityUnits(): boolean;
  get fieldValues(): BatchSubSampleEditableFields;
  get noValueLabel(): {[key in keyof BatchSubSampleEditableFields]: ?string};
  get quantityCategory(): string;
  setFieldsDirty(newFieldValues: any): void;
  setFieldEditable(fieldName: string, value: boolean): void;
}
