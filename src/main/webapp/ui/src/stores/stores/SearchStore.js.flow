// @flow

import ApiService from "../../common/InvApiService";
import { type Container, type WorkbenchId } from "../definitions/Container";
import { type Id, type GlobalId } from "../definitions/BaseRecord";
import { type Factory } from "../definitions/Factory";
import ContainerModel, { type ContainerAttrs } from "../models/ContainerModel";
import {
  type CoreFetcherArgs,
  type CoreFetcher,
  type ResultType,
} from "../definitions/Search";
import InventoryBaseRecord from "../models/InventoryBaseRecord";
import SampleModel from "../models/SampleModel";
import Search from "../models/Search";
import { type Basket, type BasketAttrs } from "../definitions/Basket";
import BasketModel from "../models/Basket";
import TemplateModel, { type TemplateAttrs } from "../models/TemplateModel";
import MemoisedFactory from "../models/Factory/MemoisedFactory";
import { type RootStore } from "./RootStore";
import {
  runInAction,
  action,
  computed,
  observable,
  makeObservable,
} from "mobx";
import { type InventoryRecord } from "../definitions/InventoryRecord";
import { type Group } from "../definitions/Group";
import { mkAlert } from "../contexts/Alert";
import { showToastWhilstPending } from "../../util/alerts";
import React from "react";

export type SavedSearch = {|
  ...CoreFetcherArgs,
  name: string,
|};

export type NewInContainerParams = {
  parentContainers: Array<ContainerModel>,
  parentLocation: | {|
        coordX: number,
        coordY: number,
      |}
    | {||},
};

declare export const getContainer: (id: Id) => Promise<ContainerModel>;

declare export default class SearchStore {
  rootStore: RootStore;
  search: Search;
  savedSearches: Array<SavedSearch>;
  savedBaskets: Array<BasketModel>;

  constructor(rootStore: RootStore): SearchStore;

  get results(): Array<InventoryRecord>;

  get fetcher(): CoreFetcher;

  get activeResult(): ?InventoryRecord;

  get searchIsSaved(): boolean;

  saveSearch(name: string, index?: number): void;

  deleteSearch(search: SavedSearch): void;

  getBaskets(): Promise<void>;

  getBasket(id: Id): Promise<Basket | void>;

  createBasket(name?: string, items?: Array<GlobalId>): Promise<void>;

  deleteBasket(id: Id): Promise<void>;

  createNewHelper(newRecord: InventoryBaseRecord): Promise<void>;

  createNewSample(
    subsampleParentDetails?: NewInContainerParams
  ): Promise<SampleModel>;

  createNewContainer(
    containerParentDetails?: NewInContainerParams
  ): Promise<ContainerModel>;

  createNewTemplate(): Promise<TemplateModel>;

  createNew(type: "sample" | "container" | "template"): Promise<InventoryBaseRecord>;

  getBench(workbenchId: WorkbenchId): Promise<Container>;

  getTemplate(
    id: number,
    version: ?number,
    factory: Factory
  ): Promise<TemplateModel>;

  get activeResultIsBeingEdited(): boolean;

  isTypeSelected(resultType: ResultType): boolean;
}
