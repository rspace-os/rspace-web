// @flow

import { type InventoryRecord } from "./InventoryRecord";
import { type Search, type SearchView } from "./Search";
import { type SubSample } from "./SubSample";
import { type Id } from "./BaseRecord";
import { type Point } from "../../util/types";
import { type Permissioned } from "./PermissionedData";
import * as ArrayUtils from "../../util/ArrayUtils";
import { match } from "../../util/Util";
import { type HasLocation } from "./HasLocation";
import { type Person } from "./Person";

export type WorkbenchId = number;
export type ContainerType = "LIST" | "GRID" | "IMAGE" | "WORKBENCH";

export type Axis = "ABC" | "CBA" | "N123" | "N321";

declare export const encodeA1Z26: (num: number) => string;

declare export const layoutToLabels: (
  layout: Axis,
  n: number
) => Array<{ value: number, label: string | number }>

export type GridLayout = {
  columnsNumber: number | "",
  rowsNumber: number | "",
  columnsLabelType: Axis,
  rowsLabelType: Axis,
};

export type ContentSummary = {|
  totalCount: number,
  subSampleCount: number,
  containerCount: number,
|};

declare export function cTypeToDefaultSearchView(cType: ContainerType): SearchView;

export interface Location extends Point {
  id: ?number;
  content: ?(SubSample | Container); //eslint-disable-line no-use-before-define
  coordX: number;
  coordY: number;
  selected: boolean;
  parentContainer: Container; //eslint-disable-line no-use-before-define

  toggleSelected(?boolean): void;
  selectOnlyThis(): void;
  setPosition(number, number): void;
  setDimensions(number, number): void;

  +siblings: Array<Location>;
  isShallow(Search): boolean;
  isShallowSelected(Search): boolean;
  isSelectable(Search): boolean;
  isShallowUnselected(Search): boolean;
  +isSiblingSelected: ?boolean;
  isGreyedOut(Search): boolean;
  +name: ?string;
  +hasContent: boolean;
  +uniqueColor: string;

  +paramsForBackend: { ... };
}

export interface Container extends InventoryRecord, HasLocation {
  cType: ContainerType;

  contentSummary: Permissioned<ContentSummary>;

  canStoreContainers: boolean;
  canStoreSamples: boolean;

  gridLayout: ?GridLayout;

  contentSearch: Search;

  getColor(Id): ?string;

  toggleAllLocations(boolean): void;

  +canStoreRecords: boolean;

  locationsCount: number;
  locations: ?Array<Location>;
  findLocation(col: number, row: number): ?Location;

  +sortedLocations: ?Array<Location>;

  +selectedLocations: ?Array<Location>;

  +isWorkbench: boolean;

  selectionMode: boolean;
  selectionStart: Point;
  selectionEnd: Point;
}

