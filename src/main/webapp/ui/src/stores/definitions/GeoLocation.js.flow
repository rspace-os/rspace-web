//@flow

export type GeoLocationBox = {
  eastBoundLongitude: string,
  northBoundLatitude: string,
  southBoundLatitude: string,
  westBoundLongitude: string,
};
export type PolygonPoint = {
  pointLatitude: string,
  pointLongitude: string,
};
export type SimplePoint = {
  latitude: string,
  longitude: string,
};

export interface GeoLocationPolygon {
  +length: number;
  get(i: number): ?{| polygonPoint: PolygonPoint |};
  set(i: number, key: $Keys<PolygonPoint>, value: string): void;
  mapPoints<T>(f: (PolygonPoint, number) => T): Array<T>;
  addAnotherPoint(i: number): void;
  removePoint(i: number): void;
  +isValid: boolean;
  +empty: boolean;
  toJson(): mixed;
}

export type GeoLocationAttrs = {|
  geoLocationBox: GeoLocationBox,
  geoLocationPlace: string,
  geoLocationPoint: PolygonPoint,
  geoLocationPolygon: Array<{| polygonPoint: PolygonPoint |}>,
  geoLocationInPolygonPoint: PolygonPoint,
|};

declare export const newGeoLocation: GeoLocationAttrs;

export interface GeoLocation {
  geoLocationPoint: PolygonPoint;
  geoLocationBox: GeoLocationBox;
  geoLocationPlace: string;
  geoLocationPolygon: GeoLocationPolygon;
  geoLocationInPolygonPoint: PolygonPoint;
  +isValid: boolean;
  +polygonEmpty: boolean;
  +inPolygonPointIncomplete: boolean;
  toJson(): { ... };
}
