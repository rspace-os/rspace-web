//@flow

import { type InventoryRecord } from "./InventoryRecord";
import { type Username, type Person } from "./Person";
import RsSet from "../../util/set";
import { type TreeView } from "./TreeView";
import { type AdjustableTableRowLabel } from "./Tables";
import { type Sample } from "./Sample";
import { type Id, type GlobalId } from "./BaseRecord";
import { type SubSample } from "./SubSample";
import { type Order } from "../../util/types";
import { type Basket } from "./Basket";
import { parseString } from "../../util/parsers";
import Result from "../../util/result";

export type SearchView = "LIST" | "TREE" | "CARD" | "IMAGE" | "GRID";
declare export const TYPE_LABEL: {
  LIST: "List",
  TREE: "Tree",
  CARD: "Card",
  GRID: "Grid",
  IMAGE: "Visual",
};

export type SearchModule =
  | "BENCHES"
  | "TYPE"
  | "STATUS"
  | "OWNER"
  | "SCAN"
  | "TAG"
  | "SAVEDSEARCHES"
  | "SAVEDBASKETS";
export type AllowedSearchModules = Set<SearchModule>;
export type SelectionMode = "NONE" | "SINGLE" | "MULTIPLE";
export type DeletedItems = "EXCLUDE" | "INCLUDE" | "DELETED_ONLY";

declare export function parseDeletedItems(str: string): Result<DeletedItems>;

export type ResultType =
  | "ALL"
  | "CONTAINER"
  | "SAMPLE"
  | "SUBSAMPLE"
  | "TEMPLATE";

declare export function parseResultType(str: string): Result<ResultType>;

export type ParentGlobalIdType =
  | "SAMPLE"
  | "SUBSAMPLE"
  | "CONTAINER"
  | "TEMPLATE"
  | "BENCH"
  | "BASKET";

export type AllowedTypeFilters = Set<ResultType>;

export type UiConfig = {|
  allowedSearchModules: AllowedSearchModules,
  allowedTypeFilters: AllowedTypeFilters,
  mainColumn: AdjustableTableRowLabel,
  adjustableColumns: Array<AdjustableTableRowLabel>,

  selectionMode: SelectionMode,

  highlightActiveResult: boolean,

  hideContentsOfChip: boolean,

  selectionLimit: number,

  onlyAllowSelectingEmptyLocations: boolean,
|};

export type PermalinkType =
  | "sample"
  | "container"
  | "subsample"
  | "sampletemplate";
export type Permalink = {| type: PermalinkType, id: number, version: ?number |};

export type CoreFetcherArgs = {|
  query?: string,
  pageNumber?: number,
  pageSize?: number,
  orderBy?: string,
  order?: Order,
  parentGlobalId?: ?GlobalId,
  resultType?: ?ResultType,
  endpoint?: string,
  results?: Array<InventoryRecord>,
  loading?: boolean,
  count?: number,
  error?: string,
  permalink?: ?Permalink,
  ownedBy?: ?string,
  owner?: ?Person,
  deletedItems?: DeletedItems,
  benchOwner?: ?Person,
|};

export interface CoreFetcher {
  loading: boolean;
  setLoading(boolean): void;
  error: string;
  setAttributes(CoreFetcherArgs): void;

  resetFetcher(): void;
  generateQuery(CoreFetcherArgs): URLSearchParams;
  generateNewQuery(CoreFetcherArgs): URLSearchParams;
  performInitialSearch(?CoreFetcherArgs): Promise<void>;
  reperformCurrentSearch(): Promise<void>;
  generateParams(?CoreFetcherArgs | {}): CoreFetcherArgs;
  applySearchParams(CoreFetcherArgs): CoreFetcherArgs;

  results: Array<InventoryRecord>;
  count: number;
  setResults(Array<InventoryRecord>): void;
  replaceResult(InventoryRecord): void;

  permalink: ?Permalink;

  query: ?string;

  parentGlobalId: ?GlobalId;
  +parentGlobalIdType: ?ParentGlobalIdType;
  setParentGlobalId(?GlobalId): void;

  order: string;
  setOrder(Order, string): void;
  isCurrentSort(string): boolean;
  invertSortOrder(): Order;
  defaultSortOrder(string): Order;
  +isOrderDesc: boolean;

  pageNumber: number;
  pageSize: number;
  setPage(number): Promise<void>;
  setPageSize(number): void;

  resultType: ?ResultType;
  setResultType(ResultType): void;

  ownedBy: ?Username;
  owner: ?Person;
  setOwner(?Person): void;

  benchOwner: ?Person;
  setBenchOwner(?Person): void;

  deletedItems: DeletedItems;
  setDeletedItems(DeletedItems): void;

  +serialize: Partial<CoreFetcherArgs>;

  +allTypesAllowed: boolean;

  +parentIsContainer: boolean;
  +parentIsBench: boolean;
  +parentIsSample: boolean;
  +parentIsTemplate: boolean;
  +basketSearch: boolean;

  +deletedItemsLabel: string;
}

export interface DynamicFetcher extends CoreFetcher {
  dynamicSearch(): void;
  +nextDynamicPageSize: number;
}

export interface CacheFetcher extends CoreFetcher {}

export type ExportMode = "FULL" | "COMPACT";
export type OptionalContent = "INCLUDE" | "EXCLUDE";
export type ExportFileType = "ZIP" | "SINGLE_CSV";

export type ExportOptions = {|
  exportMode: ExportMode,
  includeContainerContent?: ?OptionalContent,
  includeSubsamplesInSample?: ?OptionalContent,
  resultFileType?: ExportFileType,
|};

export interface Search {
  uiConfig: UiConfig;

  processingContextActions: boolean;
  +loading: boolean;

  searchView: SearchView;
  setSearchView(SearchView): Promise<void>;

  tree: TreeView;

  staticFetcher: CoreFetcher;
  dynamicFetcher: DynamicFetcher;
  cacheFetcher: CacheFetcher;
  +fetcher: CoreFetcher;

  +filteredResults: Array<InventoryRecord>;
  +count: number;
  isInResults(InventoryRecord): boolean;

  setupAndPerformInitialSearch(CoreFetcherArgs): Promise<void>;

  activeResult: ?InventoryRecord;
  setActiveResult(
    ?InventoryRecord,
    options?: {| defaultToFirstResult?: boolean, force?: boolean |}
  ): Promise<void>;

  setTypeFilter(ResultType, ?boolean): void;
  setOwner(?Person, ?boolean): void;
  setBench(?Person, ?boolean): void;
  setDeletedItems(DeletedItems, ?boolean): void;
  setParentGlobalId(?GlobalId, ?boolean): void;

  setPageSize(number): void;
  setPage(number): Promise<void>;

  +selectedResults: Array<InventoryRecord>;
  batchEditingRecords: ?RsSet<InventoryRecord>;

  alwaysFilterOut: (InventoryRecord) => boolean;

  createTemplateFromSample(string, Sample, Set<Id>): Promise<void>;
  deleteRecords(Array<InventoryRecord>): Promise<void>;
  duplicateRecords(Array<InventoryRecord>): Promise<void>;
  restoreRecords(Array<InventoryRecord>): Promise<void>;
  splitRecord(number, SubSample): Promise<void>;
  transferRecords(Username, Array<InventoryRecord>): Promise<void>;
  exportRecords(ExportOptions, Array<InventoryRecord>): Promise<void>;

  +adjustableColumnOptions: RsSet<AdjustableTableRowLabel>;
  setAdjustableColumn(AdjustableTableRowLabel, number): void;

  +showStatusFilter: boolean;
  +showTypeFilter: boolean;
  +showOwnershipFilter: boolean;
  +showBenchFilter: boolean;
  +showSavedSearches: boolean;
  +showSavedBaskets: boolean;
  +showBarcodeScan: boolean;
  +showTagsFilter: boolean;
  +allowedStatusFilters: RsSet<DeletedItems>;
  +allowedTypeFilters: AllowedTypeFilters;

  +benchSearch: boolean;

  currentBasket($ReadOnlyArray<Basket>): ?Basket;
}

