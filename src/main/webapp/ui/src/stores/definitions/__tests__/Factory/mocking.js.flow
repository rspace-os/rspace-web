//@flow

import { type Factory } from "../../../definitions/Factory";
import PersonModel from "../../../models/PersonModel";
import { type PersonAttrs } from "../../Person";
import { type BarcodeAttrs, type BarcodeRecord } from "../../Barcode";
import { type DocumentAttrs, type Document } from "../../Document";
import { type InventoryRecord } from "../../InventoryRecord";
import { type IdentifierAttrs, type Identifier } from "../../Identifier";
import { type GlobalId } from "../../BaseRecord";
import InvApiService from "../../../../common/InvApiService";

type FactoryOverrides = {|
  newRecord?: (any) => InventoryRecord,
  newPerson?: (PersonAttrs) => PersonModel,
  newBarcode?: (BarcodeAttrs) => BarcodeRecord,
  newDocument?: (DocumentAttrs) => Document,
  newIdentifier?: (
    IdentifierAttrs,
    GlobalId,
    typeof InvApiService
  ) => Identifier,
  newFactory?: () => Factory,
|};

export const mockFactory: (?FactoryOverrides) => Factory = (overrides) => {
  const f: () => Factory = () => ({
    newRecord: jest.fn<[any], InventoryRecord>(),
    newPerson: jest.fn<[PersonAttrs], PersonModel>(),
    newBarcode: jest.fn<[BarcodeAttrs], BarcodeRecord>(),
    newIdentifier: jest.fn<
      [IdentifierAttrs, GlobalId, typeof InvApiService],
      Identifier
    >(),
    newDocument: jest.fn<[DocumentAttrs], Document>(),
    newFactory: jest.fn<[], Factory>().mockImplementation(f),
    ...overrides,
  });
  return f();
};