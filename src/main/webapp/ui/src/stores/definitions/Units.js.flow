//@flow

import Result from "../../util/result";

export const unitlessIds = {
  items: 1,
};

export const volumeIds = {
  microliters: 2,
  milliliters: 3,
  liters: 4,
  picoliters: 18,
  nanoliters: 19,
  millimeterscubed: 23,
  centimeterscubed: 24,
  decimeterscubed: 25,
  meterscubed: 26,
};

export const massIds = {
  micrograms: 5,
  milligrams: 6,
  grams: 7,
  picograms: 20,
  nanograms: 21,
  kilograms: 22,
};

export const quantityIds = {
  ...volumeIds,
  ...massIds,
  ...unitlessIds,
};

export type QuantityValue = number;

export type QuantityUnitId = $Values<typeof quantityIds>;

// eslint-disable-next-line prettier/prettier
declare export const atomicUnitOfSameCategory: (QuantityUnitId) => QuantityUnitId;

declare export function toCommonUnit(value: QuantityValue, id: QuantityUnitId): number;

declare export function fromCommonUnit(
  value: QuantityValue,
  id: QuantityUnitId
): number;

declare export function msToDays(ms: number): number;

type DatePrecision =
  | "year"
  | "month"
  | "date"
  | "hour"
  | "minute"
  | "second"
  | "millisecond";

declare export function truncateIsoTimestamp(
  isoTimestamp: string | Date,
  precision: DatePrecision
): Result<string>;

declare export function todaysDate(): Date;

declare export function getRelativeTime(targetDate: Date): string;

declare export const CELSIUS: 8;

declare export const KELVIN: 9;

declare export const FAHRENHEIT: 10;

/*
 * This seems to be a weird inconsistency in flow. If we define
 * TemperatureScale as ` typeof CELSIUS | typeof KELVIN | typeof FAHRENHEIT`
 * in a regular file then `TemperatureScale` ends up with type `number` but
 * if we set it here then it has type `8 | 9 | 10`. Whilst the latter is more
 * correct, it breaks code across the codebase that assumes the type is
 * `number`, as such that's what we set here.
 */
export type TemperatureScale = number;

export type Temperature = {|
  numericValue: number,
  unitId: TemperatureScale,
|};

declare export const ABSOLUTE_ZERO: -273;

declare export const LIQUID_NITROGEN: -196;

declare export function temperatureFromTo(
  from: TemperatureScale,
  to: TemperatureScale,
  value: number
): number;

declare export const validateTemperature: (temp: ?Temperature) => Result<null>;
