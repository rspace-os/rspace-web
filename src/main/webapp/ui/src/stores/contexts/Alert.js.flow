//@flow strict

import { type Context, type Node } from "react";
import { type LinkableRecord } from "../definitions/LinkableRecord";

type AlertVariant = "success" | "warning" | "error" | "notice";

export type AlertDetails = {|
  title: string,
  variant: AlertVariant,
  record?: LinkableRecord,
  help?: string,
|};

type AlertParams = {|
  title?: ?string,
  message: string,
  variant?: AlertVariant,
  duration?: number,
  isInfinite?: boolean,
  actionLabel?: string,
  onActionClick?: () => void,
  details?: $ReadOnlyArray<AlertDetails>,
  retryFunction?: () => Promise<void>,
  allowClosing?: boolean,
  icon?: Node,
|};

export type Alert = {|
  title: ?string,
  message: string,
  id: number,
  variant: AlertVariant,
  duration: number,
  isInfinite: boolean,
  isOpen: boolean,
  actionLabel: ?string,
  onActionClick: () => void,
  details: Array<AlertDetails>,
  detailsCount: number,
  retryFunction: ?() => Promise<void>,
  allowClosing: boolean,
  icon: ?Node,
|};

declare export function mkAlert(config: AlertParams): Alert;

type AlertContextType = {|
  addAlert: (Alert) => void,
  removeAlert: (Alert) => void,
|};

declare export default Context<AlertContextType>;
