//@flow strict

import { Optional } from "../../util/optional";

export type OptionsId = string;

export type IntegrationState<Credentials> = {|
  mode: "UNAVAILABLE" | "DISABLED" | "ENABLED" | "EXTERNAL",
  credentials: Credentials,
|};

export type IntegrationStates = {|
  ARGOS: IntegrationState<{||}>,
  ASCENSCIA: IntegrationState<null>,
  BOX: IntegrationState<{|
    BOX_LINK_TYPE: Optional<"LIVE" | "VERSIONED" | "ASK">,
    "box.api.enabled": Optional<boolean>,
  |}>,
  CHEMISTRY: IntegrationState<{||}>,
  CLUSTERMARKET: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  DATAVERSE: IntegrationState<
    Array<
      Optional<{|
        DATAVERSE_APIKEY: string,
        DATAVERSE_URL: string,
        DATAVERSE_ALIAS: string,
        _label: string,
        optionsId: OptionsId,
      |}>
    >
  >,
  DIGITALCOMMONSDATA: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  DMPONLINE: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  DMPTOOL: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  DROPBOX: IntegrationState<{||}>,
  DRYAD: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  EGNYTE: IntegrationState<{|
    EGNYTE_DOMAIN: Optional<string>,
  |}>,
  EVERNOTE: IntegrationState<{||}>,
  FIELDMARK: IntegrationState<{|
    FIELDMARK_USER_TOKEN: Optional<string>,
  |}>,
  FIGSHARE: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  GITHUB: IntegrationState<
    Array<
      Optional<{|
        /*
         * we use an inner Optional so that the user can see which repo is in an
         * invalid state, and can thus remove and readd
         */
        GITHUB_ACCESS_TOKEN: Optional<string>,
        GITHUB_REPOSITORY_FULL_NAME: string,
        optionsId: OptionsId,
      |}>
    >
  >,
  GOOGLEDRIVE: IntegrationState<{|
    ["googledrive.linking.enabled"]: Optional<boolean>,
  |}>,
  JOVE: IntegrationState<{||}>,
  MSTEAMS: IntegrationState<
    Array<
      Optional<{|
        MSTEAMS_CHANNEL_LABEL: string,
        MSTEAMS_WEBHOOK_URL: string,
        optionsId: OptionsId,
      |}>
    >
  >,
  NEXTCLOUD: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  OMERO: IntegrationState<{||}>,
  ONEDRIVE: IntegrationState<{||}>,
  OWNCLOUD: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  PROTOCOLS_IO: IntegrationState<{|
    ACCESS_TOKEN: Optional<string>,
  |}>,
  PYRAT: IntegrationState<{|
    configuredServers: $ReadOnlyArray<{|
      url: string,
      alias: string,
    |}>,
    authenticatedServers: $ReadOnlyArray<{|
      url: string,
      alias: string,
      apiKey: string,
      optionsId: OptionsId,
    |}>,
  |}>,
  SLACK: IntegrationState<
    Array<
      Optional<{|
        SLACK_TEAM_NAME: string,
        SLACK_CHANNEL_ID: string,
        SLACK_CHANNEL_NAME: string,
        SLACK_USER_ID: string,
        SLACK_CHANNEL_LABEL: string,
        SLACK_USER_ACCESS_TOKEN: string,
        SLACK_TEAM_ID: string,
        SLACK_WEBHOOK_URL: string,
        optionsId: OptionsId,
      |}>
    >
  >,
  ZENODO: IntegrationState<{|
    ZENODO_USER_TOKEN: Optional<string>,
  |}>,
|};

export type Integration = $Keys<IntegrationStates>;

declare export function useIntegrationsEndpoint(): {|
  allIntegrations: () => Promise<IntegrationStates>,

  update: <I: Integration & string>(
    integration: I,
    newState: IntegrationStates[I]
  ) => Promise<IntegrationStates[I]>,

  saveAppOptions: <I: Integration & string>(
    appName: I,
    optionsId: Optional<OptionsId>,
    newOption: { ... }
  ) => Promise<IntegrationStates[I]>,

  deleteAppOptions: <I: Integration & string>(
    appName: I,
    optionsId: OptionsId
  ) => Promise<void>,
|};
