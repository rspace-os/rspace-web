{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "8dbeec81-80f4-4113-abdc-b25c0bb9fc74",
      "cell_type": "code",
      "source": "import json\n%pip install -q nbformat \n%pip install rspace-client==2.6.1\n%pip install pickleshare\nimport nbformat\nfrom rspace_client.eln import eln\nimport os\nimport hashlib\n\nrspace_client = None\n\ndef get_rspace_client():\n    \"\"\"\n    Returns rspace ELN API client\n    \"\"\"\n    try:\n        URL='https://researchspace.eu.ngrok.io/'\n        API_KEY='IXk3jOBEWPuFcYAbKDoTP5ecLdFWDPNY'\n        global rspace_client\n        if rspace_client is None:\n            rspace_client = eln.ELNClient(URL, API_KEY)\n            print(rspace_client.get_status())\n        return rspace_client\n    except Exception as e:\n        print(f\"Error connecting to RSpace: {e}\")\n        return None\n\n\n",
      "metadata": {
        "trusted": true,
        "tags": [],
        "editable": true,
        "slideshow": {
          "slide_type": ""
        }
      },
      "outputs": [],
      "execution_count": 1
    },
    {
      "id": "60a3610d-d60c-440f-a60b-9045d75ffa1b",
      "cell_type": "code",
      "source": "# Spectroscopy Data Visualization - RSpace Integration Example\n# This notebook creates publication-ready plots from spectroscopy data\n%pip install -q pandas\n%pip install -q matplotlib\n%pip install -q scipy\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.signal import find_peaks\nimport datetime\n\n# Set publication-ready style\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.grid'] = True  \nplt.rcParams['grid.alpha'] = 0.3\nplt.rcParams['font.size'] = 10\n\n# client uses direct RSpace file access to download file to jupyterLab file system\nclient = get_rspace_client()\nraw_temp_data = client.download_file(\"GL408\", \"spectroscopy_data.csv\")\ndata = pd.read_csv('spectroscopy_data.csv')\n\nprint(\"=== RSpace Spectroscopy Visualization Workflow ===\")\nprint(f\"Visualization started: {datetime.datetime.now()}\")\nprint(f\"Dataset shape: {data.shape}\")\nprint(f\"Wavelength range: {data['Wavelength'].min()}-{data['Wavelength'].max()} nm\")\n\n# Background correction\ndata['Sample_A_Corrected'] = data['Sample_A_Abs'] - data['Background']\ndata['Sample_B_Corrected'] = data['Sample_B_Abs'] - data['Background']\ndata['Sample_C_Corrected'] = data['Sample_C_Abs'] - data['Background']\n\n# Create comprehensive visualization suite\nfig = plt.figure(figsize=(15, 12))\n\n# 1. Main absorption spectra\nax1 = plt.subplot(3, 2, 1)\nax1.plot(data['Wavelength'], data['Sample_A_Corrected'], 'b-', linewidth=2, label='Sample A (10.5 μM)')\nax1.plot(data['Wavelength'], data['Sample_B_Corrected'], 'g-', linewidth=2, label='Sample B (5.2 μM)')\nax1.plot(data['Wavelength'], data['Sample_C_Corrected'], 'r-', linewidth=2, label='Sample C (18.7 μM)')\nax1.set_xlabel('Wavelength (nm)')\nax1.set_ylabel('Absorbance (AU)')\nax1.set_title('UV-Vis Absorption Spectra (Background Corrected)')\nax1.legend()\nax1.grid(True, alpha=0.3)\n\n# 2. Peak analysis\nax2 = plt.subplot(3, 2, 2)\n# Find peaks for Sample C (highest concentration)\npeaks_c, _ = find_peaks(data['Sample_C_Corrected'], height=0.1, distance=10)\nax2.plot(data['Wavelength'], data['Sample_C_Corrected'], 'r-', linewidth=2, label='Sample C')\nax2.plot(data['Wavelength'].iloc[peaks_c], data['Sample_C_Corrected'].iloc[peaks_c], 'ro', markersize=8, label='Detected Peaks')\nax2.set_xlabel('Wavelength (nm)')\nax2.set_ylabel('Absorbance (AU)')\nax2.set_title('Peak Analysis - Sample C')\nax2.legend()\nax2.grid(True, alpha=0.3)\n\n# Add peak annotations\nfor i, peak_idx in enumerate(peaks_c):\n    ax2.annotate(f'{data[\"Wavelength\"].iloc[peak_idx]:.0f} nm\\n{data[\"Sample_C_Corrected\"].iloc[peak_idx]:.3f} AU', \n                xy=(data['Wavelength'].iloc[peak_idx], data['Sample_C_Corrected'].iloc[peak_idx]),\n                xytext=(10, 10), textcoords='offset points', fontsize=9,\n                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))\n\n# 3. Concentration vs Max Absorbance\nax3 = plt.subplot(3, 2, 3)\nconcentrations = [5.2, 10.5, 18.7]  # B, A, C\nmax_abs = [data['Sample_B_Corrected'].max(), \n           data['Sample_A_Corrected'].max(), \n           data['Sample_C_Corrected'].max()]\n\n# Linear regression for Beer's law\nslope, intercept = np.polyfit(concentrations, max_abs, 1)\nr_squared = np.corrcoef(concentrations, max_abs)[0, 1]**2\n\nax3.scatter(concentrations, max_abs, s=100, alpha=0.7)\nx_line = np.linspace(0, 20, 100)\ny_line = slope * x_line + intercept\nax3.plot(x_line, y_line, 'r--', alpha=0.8, label=f'Linear fit (R² = {r_squared:.3f})')\nax3.set_xlabel('Concentration (μM)')\nax3.set_ylabel('Maximum Absorbance (AU)')\nax3.set_title('Beer\\'s Law Calibration')\nax3.legend()\nax3.grid(True, alpha=0.3)\n\n# Add equation annotation\nax3.text(0.05, 0.95, f'y = {slope:.4f}x + {intercept:.4f}', \n         transform=ax3.transAxes, fontsize=10,\n         bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue', alpha=0.7))\n\n# 4. Raw vs Background-corrected comparison\nax4 = plt.subplot(3, 2, 4)\nax4.plot(data['Wavelength'], data['Sample_A_Abs'], 'b--', alpha=0.7, label='Raw Sample A')\nax4.plot(data['Wavelength'], data['Sample_A_Corrected'], 'b-', linewidth=2, label='Corrected Sample A')\nax4.plot(data['Wavelength'], data['Background'], 'k:', linewidth=2, label='Background')\nax4.set_xlabel('Wavelength (nm)')\nax4.set_ylabel('Absorbance (AU)')\nax4.set_title('Background Correction Effect')\nax4.legend()\nax4.grid(True, alpha=0.3)\n\n# 5. Heatmap of all samples (using matplotlib instead of seaborn)\nax5 = plt.subplot(3, 2, 5)\nheatmap_data = np.array([data['Sample_A_Corrected'], \n                        data['Sample_B_Corrected'], \n                        data['Sample_C_Corrected']])\nim = ax5.imshow(heatmap_data, cmap='viridis', aspect='auto')\nax5.set_yticks([0, 1, 2])\nax5.set_yticklabels(['Sample A', 'Sample B', 'Sample C'])\nax5.set_xticks(range(0, len(data), 5))\nax5.set_xticklabels(data['Wavelength'][::5].astype(int))\nax5.set_title('Absorption Intensity Heatmap')\nax5.set_xlabel('Wavelength (nm)')\nplt.colorbar(im, ax=ax5, label='Absorbance (AU)')\n\n# 6. Derivative spectra for peak resolution\nax6 = plt.subplot(3, 2, 6)\n# Calculate first derivative\nderiv_a = np.gradient(data['Sample_A_Corrected'])\nderiv_b = np.gradient(data['Sample_B_Corrected'])\nderiv_c = np.gradient(data['Sample_C_Corrected'])\n\nax6.plot(data['Wavelength'], deriv_a, 'b-', linewidth=2, label='Sample A')\nax6.plot(data['Wavelength'], deriv_b, 'g-', linewidth=2, label='Sample B')\nax6.plot(data['Wavelength'], deriv_c, 'r-', linewidth=2, label='Sample C')\nax6.axhline(y=0, color='k', linestyle='--', alpha=0.5)\nax6.set_xlabel('Wavelength (nm)')\nax6.set_ylabel('First Derivative (dA/dλ)')\nax6.set_title('First Derivative Spectra')\nax6.legend()\nax6.grid(True, alpha=0.3)\n\nplt.tight_layout()\n\n# TODO: This would be automatically synced to RSpace\n# rspace_client.add_plot_to_document(document_id=\"SD12345\", plot=fig, \n#                                   title=\"Complete Spectroscopy Analysis\")\nplt.savefig('spectroscopy_analysis_suite.png', dpi=300, bbox_inches='tight')\n# plt.show()\n\n# Generate summary statistics table\nsummary_stats = {\n    'Sample': ['A', 'B', 'C'],\n    'Concentration_uM': [10.5, 5.2, 18.7],\n    'Max_Absorbance': [data['Sample_A_Corrected'].max(), \n                       data['Sample_B_Corrected'].max(), \n                       data['Sample_C_Corrected'].max()],\n    'Peak_Wavelength': [data.loc[data['Sample_A_Corrected'].idxmax(), 'Wavelength'],\n                        data.loc[data['Sample_B_Corrected'].idxmax(), 'Wavelength'],\n                        data.loc[data['Sample_C_Corrected'].idxmax(), 'Wavelength']],\n    'Peak_Width_FWHM': [15.2, 14.8, 16.1]  # Would be calculated from actual peak analysis\n}\n\nsummary_df = pd.DataFrame(summary_stats)\nsummary_df['Max_Absorbance'] = summary_df['Max_Absorbance'].round(3)\n\nprint(\"\\n=== Analysis Summary for RSpace ===\")\nprint(summary_df.to_string(index=False))\n\n# TODO: Metadata would be automatically captured by RSpace\nvisualization_metadata = {\n    'notebook_version': '2.1',\n    'execution_time': datetime.datetime.now(),\n    'input_file_checksum': 'def456',  # Would be calculated by RSpace\n    'plots_generated': [\n        'UV-Vis Absorption Spectra',\n        'Peak Analysis',\n        'Beer\\'s Law Calibration', \n        'Background Correction Comparison',\n        'Absorption Heatmap',\n        'First Derivative Spectra'\n    ],\n    'key_results': [\n        f\"Linear calibration R² = {r_squared:.3f}\",\n        f\"Peak wavelengths: {data.loc[data['Sample_C_Corrected'].idxmax(), 'Wavelength']:.0f} nm\",\n        f\"Molar absorptivity: {slope:.2f} L/(mol·cm)\"\n    ]\n}\n\nprint(f\"\\nVisualization completed: {visualization_metadata['execution_time']}\")\nprint(\"All plots ready for RSpace document integration!\")",
      "metadata": {
        "trusted": true,
        "tags": [],
        "editable": true,
        "slideshow": {
          "slide_type": ""
        },
        "scrolled": true
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": "Matplotlib is building the font cache; this may take a moment.\n"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "{'message': 'OK', 'rspaceVersion': '2.15.1-SNAPSHOT-2025-09-11T13:07:27Z'}\n=== RSpace Spectroscopy Visualization Workflow ===\nVisualization started: 2025-09-11 14:32:22.495000\nDataset shape: (35, 8)\nWavelength range: 280-450 nm\n\n=== Analysis Summary for RSpace ===\nSample  Concentration_uM  Max_Absorbance  Peak_Wavelength  Peak_Width_FWHM\n     A              10.5           0.478              410             15.2\n     B               5.2           0.256              420             14.8\n     C              18.7           0.793              435             16.1\n\nVisualization completed: 2025-09-11 14:32:24.406000\nAll plots ready for RSpace document integration!\n"
        }
      ],
      "execution_count": 2
    },
    {
      "id": "a897d50c-0ea9-4f47-8fff-a69c74e5e02c",
      "cell_type": "code",
      "source": "import json\n%pip install -q nbformat \n%pip install rspace-client==2.6.1\n%pip install pickleshare\nimport nbformat\nfrom rspace_client.eln import eln\nimport os\nimport hashlib\n\ndef get_notebook_as_dict():\n    \"\"\"\n    Alternative approach to get notebook content as a Python dictionary\n    Note: This requires the notebook file to be saved first\n    \"\"\"\n    try:\n        # This will only work if the notebook has been saved\n        import glob\n        \n        # Try to find the current notebook file\n        notebook_files = glob.glob(\"*.ipynb\")\n        if notebook_files:\n            raw_notebook_file_id = None\n            # raw_notebook_file_id = 55645\n            # FIXME - Uses the most recently modified notebook which might not be this notebook\n            # latest_notebook = max(notebook_files, key=os.path.getmtime)\n            latest_notebook = 'RSpaceDemo.ipynb'\n            \n            if raw_notebook_file_id:\n                print(f\"This notebook saved previously with RSpaceID {raw_notebook_file_id}\" )\n            else:\n                print(\"Notebook not previously saved to RSpace\")\n            # with open(latest_notebook) as f:\n            #     d = json.load(f)\n            #     print(d)\n            with open(latest_notebook, 'r', encoding='utf-8') as f:\n                client = get_rspace_client()\n                print('start upload to gallery')\n                gallery_file_id = client.upload_file(f)['id']\n                print('done upload to gallery')\n                # print('<scRipt>alert(\"12333333\")</scRipt>') - tested and no injection effects\n                # print('start update to gallery')\n                # gallery_file_id = client.update_file(f,'55708')['id']\n                # print('end update to gallery')\n                print(f\"Gallery file ID is: {gallery_file_id}\")\n                if raw_notebook_file_id is None:\n                    new_doc = client.create_document(name=latest_notebook)\n                    content = f\"\"\"\n                    <p>A link to jupyter notebook inserted into gallery.\n                    data: <fileId={gallery_file_id}>\n                    <p>\n                    \"\"\"\n                    updated_doc = client.append_content(new_doc['id'], content)\n            # with open(latest_notebook, 'r', encoding='utf-8') as f:\n            #     notebook_dict = json.load(f)\n            #     docName = f.name\n            #     client = get_rspace_client()\n            #     if(raw_notebook_file_id):\n            #         print('start doc update')\n            #         raw_data_file = client.update_document(\n            #             raw_notebook_file_id,\n            #             name = docName,\n            #             tags = [\"Python\", \"API\", \"example\"],\n            #             fields = [{\"content\": json.dumps(notebook_dict)}],\n            #         )\n            #         print(f\"Updated notebook: {latest_notebook}\")\n            #     else:\n            #         raw_data_file = client.create_document(\n            #             name = docName,\n            #             tags = [\"Python\", \"API\", \"example\"],\n            #             fields = [{\"content\": json.dumps(notebook_dict)}],\n            #         )\n            #         print(json.dumps(notebook_dict))\n            #         print(f\"Created notebook: {latest_notebook}\")\n            # raw_notebook_file_id = raw_data_file['id']\n            # print(raw_notebook_file_id)\n        else:\n            print(\"No .ipynb files found in current directory\")\n            return None\n            \n    except Exception as e:\n        print(f\"Error reading notebook file: {e}\")\n        return None\n\nnotebook_dict = get_notebook_as_dict()\n\n",
      "metadata": {
        "trusted": true,
        "tags": [],
        "editable": true,
        "slideshow": {
          "slide_type": ""
        }
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Notebook not previously saved to RSpace\nstart upload to gallery\ndone upload to gallery\nGallery file ID is: 417\n"
        }
      ],
      "execution_count": 3
    },
    {
      "id": "acb22790-5724-410e-a4ec-9cc39d08da15",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}