//@flow

import { type Node } from "react";
import { Optional } from "../../../util/optional";
import * as FetchingData from "../../../util/fetchingData";
import Result from "../../../util/result";

export opaque type UserId = number;

export opaque type ApiParameters = {|
  page: number,
  pageSize: number,
  orderBy: string | null,
  sortOrder: "asc" | "desc" | null,
  searchTerm: string,
  tags: Array<string>,
|};

export type User = {|
  id: UserId,
  url: string,
  fullName: string,
  firstName: string,
  lastName: string,
  email: string,
  username: string,
  role: string,
  isPi: boolean,
  isRegularUser: boolean,
  recordCount: number,
  fileUsage: number,
  lastLogin: Optional<Date>,
  created: Optional<Date>,
  enabled: boolean,
  locked: boolean,
  groups: Array<string>,
  tags: Array<string>,
  usernameAlias: string,
  grantPiRole: (string) => Promise<void>,
  revokePiRole: (string) => Promise<void>,
  unlock: () => Promise<void>,
  enable: () => Promise<void>,
  disable: () => Promise<void>,
  delete: () => Promise<void>,
  setAlias: (string) => Promise<void>,
  hasFormsUsedByOtherUsers: boolean,
|};

export type UserListing = {|
  users: Array<User>,
  totalListingCount: number,
  getById: (UserId) => Result<User>,

  // search parameters
  getSearchParameters: () => ApiParameters,
  setSearchParameters: (ApiParameters) => Promise<void>,
  page: number,
  setPage: (number) => Promise<void>,
  pageSize: number,
  setPageSize: (number) => Promise<void>,
  orderBy: string | null,
  sortOrder: "asc" | "desc" | null,
  setOrdering: (string, "asc" | "desc") => Promise<void>,
  clearOrdering: () => Promise<void>,
  searchTerm: string,
  setSearchTerm: (string) => Promise<void>,
  tags: Array<string>,
  applyTagsFilter: (Array<string>) => Promise<void>,
  allUsers: () => Promise<UserListing>,

  // summary info
  availableSeats: string,
  billableUsersCount: number,
  systemAdminCount: number,
  communityAdminCount: number,
  totalUsersCount: number,

  // operations on multiple users
  setTags: (
    users: $ReadOnlyArray<User>,
    addedTags: $ReadOnlyArray<string>,
    deletedTags: $ReadOnlyArray<string>
  ) => Promise<void>,
|};

declare export function useUserListing(): {|
  userListing: FetchingData.Fetched<UserListing>,
|}
