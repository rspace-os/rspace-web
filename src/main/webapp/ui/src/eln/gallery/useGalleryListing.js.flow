//@flow

import Result from "../../util/result";
import * as FetchingData from "../../util/fetchingData";
import { type Node } from "react";
import { Optional } from "../../util/optional";
import { type URL as UrlType } from "../../util/types";
import { type GallerySection } from "./common";

export opaque type Id = number | null;
declare export const dummyId: () => Id;

declare export function idToString(id: Id): Result<string>;

type DescriptionInternalState =
  | {| key: "missing" |}
  | {| key: "empty" |}
  | {| key: "present", value: string |};
declare export class Description {
  constructor(state: DescriptionInternalState): Description;

  static Missing(): Description;
  static Empty(): Description;
  static Present(value: string): Description;

  toString(): Result<string>;

  match<T>({|
    missing: () => T,
    empty: () => T,
    present: (string) => T,
  |}): T;
}

export interface GalleryFile {
  deconstructor(): void;

  +id: Id;
  +globalId?: string;
  name: string;

  +key: string;

  +extension: string | null;

  +creationDate?: Date;
  +modificationDate?: Date;
  +type?: string;
  +thumbnailUrl: UrlType;
  +ownerName?: string;
  description: Description;

  +size: number;

  +version?: number;

  +originalImageId?: string | null;

  +path: $ReadOnlyArray<GalleryFile>;

  pathAsString(): string;

  downloadHref?: () => Promise<UrlType>;

  +isFolder: boolean;
  +isSystemFolder: boolean;
  +isImage: boolean;
  +isSnippet: boolean;
  +isSnippetFolder: boolean;

  transformFilename((string) => string): string;

  +setName?: (string) => void;
  +setDescription?: (Description) => void;

  +linkedDocuments: Node;

  +canOpen: Result<null>;
  +canDuplicate: Result<null>;
  +canDelete: Result<null>;
  +canRename: Result<null>;
  +canMoveToIrods: Result<null>;
  +canBeExported: Result<null>;
  +canBeMoved: Result<null>;
  +canUploadNewVersion: Result<null>;
  +canBeLoggedOutOf: Result<null>;

  +treeViewItemId: string;
}

declare export function chemistryFilePreview(file: GalleryFile): Result<string>;

declare export class LocalGalleryFile implements GalleryFile {
  +id: Id;
  +globalId: string;
  name: string;
  +extension: string | null;
  +creationDate: Date;
  +modificationDate: Date;
  description: Description;
  +type: string;
  +ownerName: string;
  +gallerySection: GallerySection;
  +size: number;
  +version: number;
  +thumbnailId: number | null;
  downloadHref: void | (() => Promise<UrlType>);
  +originalImageId: string | null;

  +path: $ReadOnlyArray<GalleryFile>;

  +setName: (string) => void;
  +setDescription: (Description) => void;

  constructor({|
    id: Id,
    globalId: string,
    name: string,
    extension: string | null,
    creationDate: Date,
    modificationDate: Date,
    description: Description,
    type: string,
    ownerName: string,
    path: $ReadOnlyArray<GalleryFile>,
    gallerySection: GallerySection,
    size: number,
    version: number,
    thumbnailId: number | null,
    originalImageId: string | null,
    token: string,
  |}): LocalGalleryFile;

  get key(): string;

  deconstructor(): void;

  get isFolder(): boolean;
  get isImage(): boolean;
  get isSnippet(): boolean;
  get isSystemFolder(): boolean;
  get isSnippetFolder(): boolean;

  pathAsString(): string;

  get thumbnailUrl(): string;

  transformFilename(f: (string) => string): string;

  get linkedDocuments(): Node;

  get canOpen(): Result<null>;
  get canDuplicate(): Result<null>;
  get canDelete(): Result<null>;
  get canRename(): Result<null>;
  get canMoveToIrods(): Result<null>;
  get canBeExported(): Result<null>;
  get canBeMoved(): Result<null>;

  get canUploadNewVersion(): Result<null>;

  get canBeLoggedOutOf(): Result<null>;

  get treeViewItemId(): string;
}

declare export class Filestore implements GalleryFile {
  id: Id;
  filesystemId: number;
  filesystemName: string;
  name: string;
  description: Description;
  +isFolder: boolean;
  +size: number;
  +path: $ReadOnlyArray<GalleryFile>;

  constructor({|
    id: Id,
    name: string,
    filesystemId: number,
    filesystemName: string,
  |}): Filestore;

  deconstructor(): void;

  get key(): string;

  get extension(): string | null;

  get thumbnailUrl(): string;

  pathAsString(): string;

  get isSystemFolder(): boolean;
  get isImage(): boolean;
  get isSnippet(): boolean;
  get isSnippetFolder(): boolean;

  transformFilename(f: (string) => string): string;

  get linkedDocuments(): Node;

  get canOpen(): Result<null>;
  get canDuplicate(): Result<null>;
  get canDelete(): Result<null>;
  get canRename(): Result<null>;
  get canMoveToIrods(): Result<null>;
  get canBeExported(): Result<null>;
  get canBeMoved(): Result<null>;
  get canUploadNewVersion(): Result<null>;
  get canBeLoggedOutOf(): Result<null>;

  get treeViewItemId(): string;
}

declare export function useGalleryListing({|
  listingOf:
    | {|
        tag: "section",
        section: GallerySection,
        path: $ReadOnlyArray<GalleryFile>,
      |}
    | {| tag: "folder", folderId: number |},
  searchTerm: string,
  sortOrder: "DESC" | "ASC",
  orderBy: "name" | "modificationDate",
  foldersOnly?: boolean,
|}): {|
  galleryListing: FetchingData.Fetched<
    | {| tag: "empty", reason: string, refreshing: boolean |}
    | {|
        tag: "list",
        totalHits: number,
        list: $ReadOnlyArray<GalleryFile>,
        loadMore: Optional<() => Promise<void>>,
        refreshing: boolean,
      |}
  >,
  refreshListing: () => Promise<void>,
  path: FetchingData.Fetched<$ReadOnlyArray<GalleryFile>>,
  folderId: FetchingData.Fetched<Id>,
  selectedSection: FetchingData.Fetched<GallerySection>,
|};
