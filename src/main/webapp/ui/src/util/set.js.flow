//@flow strict

import { Optional } from "./optional";

declare export default class RsSet<A> extends Set<A> {
  constructor(?Iterable<A>): RsSet<A>;
  hasWithEq(A, (A, A) => boolean): boolean;
  add(A): RsSet<A>;
  get isEmpty(): boolean;
  get first(): A;
  get last(): A;
  get only(): Optional<A>;
  map<B>((A) => B): RsSet<B>;
  filter((A) => boolean): RsSet<A>;
  filterClass<T>(Class<T>): RsSet<T>;
  reduce<B>((B, A) => B, B): B;
  every((A) => boolean): boolean;
  some((A) => boolean): boolean;
  union(...Array<RsSet<A>>): RsSet<A>;
  intersection(...Array<RsSet<A>>): RsSet<A>;
  subtract(RsSet<A>): RsSet<A>;
  disjunctiveUnion(RsSet<A>): RsSet<A>;
  subtractMap<B>((A) => B, RsSet<B>): RsSet<A>;
  intersectionMap<B>((A) => B, RsSet<B>): RsSet<A>;
  unionWithEq(RsSet<A>, (A, A) => boolean): RsSet<A>;
  subtractWithEq(RsSet<A>, (A, A) => boolean): RsSet<A>;
  isSubsetOf(RsSet<A>): boolean;
  isSupersetOf(RsSet<A>): boolean;
  isSame(RsSet<A>): boolean;
  toArray(?(A, A) => number): Array<A>;
  mapOptional<B>((A) => Optional<B>): RsSet<B>;
}

declare export function flattenWithIntersection<A>(
  RsSet<RsSet<A>>
): RsSet<A>;

declare export function flattenWithIntersectionWithEq<A>(
  RsSet<RsSet<A>>,
  (A, A) => boolean,
): RsSet<A>;

declare export function flattenWithUnion<A>(RsSet<RsSet<A>>): RsSet<A>;

declare export function unionWith<A, B>((A) => B, Array<RsSet<A>>): RsSet<A>;

declare export function nullishToSingleton<A>(?A): RsSet<A>;
