//@flow

import { type Axis } from "../stores/definitions/Container";
import { type Order } from "./types";
import { type Column } from "@mui/x-data-grid";
import { type Node } from "react";

declare export function desc<T: string, U>(a: {[T]: U}, b: {[T]: U}, orderBy: T): -1 | 0 | 1;
declare export function stableSort<T>(array: $ReadOnlyArray<T>, cmp: (T, T) => -1 | 0 | 1): Array<T>;
declare export function getSorting<T: string>( order: Order, orderBy: T): ({ [T]: any }, { [T]: any }) => -1 | 0 | 1;
declare export function getSortingSpecified<T: {}>(order: Order, orderBy: string, map: { [string]: (T) => string }): ((T, T) => -1 | 0 | 1);

// eslint-disable-next-line prettier/prettier
declare export const paginationOptions: (resultsLength: number) => Array<number | {| value: number, label: string |}>;

type ColumnProps<Row: { ... }, Value> = {|
  headerName: string,
  renderCell?: (params: {
    row: Row,
    value: Value,
    tabIndex: number,
    ...
  }) => Node,
  valueFormatter?: (Value) => Node,
  hideable?: boolean,
  width?: number,
  flex?: number,
  disableColumnMenu?: boolean,
  sortable?: boolean,
  headerClassName?: string,
  disableExport?: boolean,
  display?: "text" | "flex",
  resizable?: boolean,
|};

declare export const DataGridColumn: {|
  newColumnWithFieldName<Field: string, Row: { ... }>(
    field: Field,
    rest: ColumnProps<Row, Row[Field]>
  ): Column<Row>,
  newColumnWithValueMapper<Field: string, Row: { ... }>(
    field: Field,
    mapFunction: (Row[Field]) => string,
    rest: ColumnProps<Row, Row[Field]>
  ): Column<Row>,
  newColumnWithValueGetter<Field: string, Row: { ... }>(
    field: Field,
    valueGetter: (Row) => string,
    rest: ColumnProps<Row, mixed>
  ): Column<Row>
|};
