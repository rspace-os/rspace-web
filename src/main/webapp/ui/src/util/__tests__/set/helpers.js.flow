//@flow strict

import fc, { type Arbitrary } from "fast-check";
import RsSet from "../../set";

/**
 * This is a helper function that generates an Arbitrary of RsSet. It is useful
 * for testing functions that operate on sets.
 */
declare export function arbRsSet<T>(
  arb: Arbitrary<T>,
  options: ?{|
    minSize?: number,
    maxSize?: number,
  |}
): Arbitrary<RsSet<T>>;

/**
 * This is a helper functions for generating arbitrary subsets of a set. It is
 * useful for testing functions that operate on subsets of sets.
 */
declare export function arbSubsetOf<T>(arbSet: RsSet<T>): Arbitrary<RsSet<T>>;

/**
 * A function for unwrapping objects with an id attribute, and a few sets of
 * those objects for testing.
 */
export type ArbitraryMappableSets<A, B: {| id: A |}> = [
  (B) => A,
  RsSet<B>,
  RsSet<B>,
  RsSet<B>
];

/**
 * Functions like subtractMap, intersectionMap, and unionWith operate over a
 * collection of sets that are related based on some mapping function. This
 * arbitrary supports testing these functions by providing such a function and
 * several sets of arbitrary contents.
 */
export var arbitraryMappableSets: Arbitrary<
  ArbitraryMappableSets<mixed, {| id: mixed |}>
>;

/**
 * This is for testing flattenWithUnion and flattenWithIntersection.
 *
 * This Arbitrary generates a set of between 1 and 3 sets, each containing
 * between 1 and 5 elements, taken from a pool of 5 random pieces of data.
 * This ensures that there will be a high degree of overlap between the sets and
 * that no set will be empty. This useful because intersection does not produce
 * interesting results if there is no overlap amongst the inputs.
 */
export var arbSetOfSetsWithHighOverlap: Arbitrary<RsSet<RsSet<mixed>>>;