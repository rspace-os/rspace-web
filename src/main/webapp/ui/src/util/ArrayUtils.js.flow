// @flow strict

import Result from "./result";
import { Optional } from "./optional";

declare export function zipWith<A, B, C>(
  $ReadOnlyArray<A>,
  $ReadOnlyArray<B>,
  (A, B, number) => C
): Array<C>;
declare export function allAreUnique<T>($ReadOnlyArray<T>): boolean;
declare export function splice<T>(
  $ReadOnlyArray<T>,
  number,
  number,
  ...$ReadOnlyArray<T>
): Array<T>;
declare export function reverse<A>($ReadOnlyArray<A>): Array<A>;
declare export function head<T>($ReadOnlyArray<T>): Result<T>;
declare export function last<T>($ReadOnlyArray<T>): Result<T>;
declare export function dropLast<T>(
  $ReadOnlyArray<T>
): Result<$ReadOnlyArray<T>>;
declare export function outerProduct<A, B, C>(
  $ReadOnlyArray<A>,
  $ReadOnlyArray<B>,
  (A, B) => C
): $ReadOnlyArray<$ReadOnlyArray<C>>;
declare export function partition<T>(
  (T) => boolean,
  $ReadOnlyArray<T>
): [Array<T>, Array<T>];
declare export function groupBy<T, K: string>(
  f: (T) => K,
  list: $ReadOnlyArray<T>
): { [K]: Array<T> };
declare export function filterClass<T, U>(
  Class<T>,
  $ReadOnlyArray<U>
): Array<T>;
declare export function intersperse<A>(A, $ReadOnlyArray<A>): Array<A>;
declare export function takeWhere<A>(
  $ReadOnlyArray<A>,
  $ReadOnlyArray<boolean>
): Array<A>;
declare export function find<T>((T) => boolean, $ReadOnlyArray<T>): Optional<T>;
declare export function getAt<T>(number, $ReadOnlyArray<T>): Optional<T>;
declare export function mapOptional<A, B>(
  (A) => Optional<B>,
  $ReadOnlyArray<A>
): Array<B>;
declare export function filterNull<A>($ReadOnlyArray<?A>): Array<A>;
declare export function all<A>($ReadOnlyArray<Optional<A>>): Optional<Array<A>>;
