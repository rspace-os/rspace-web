//@flow strict

import Result from './result';

declare export class Optional<T> {
    isEqual(Optional<T>): boolean;
    static present<U>(U): Optional<U>;
    static empty<U>(): Optional<U>;
    destruct<U>(() => U, (T) => U): U;
    isPresent(): boolean;
    isEmpty(): boolean;
    orElseGet<U>(() => U): T | U;
    orElse<U>(U): T | U;
    orElseTry<U>(() => Optional<U>): Optional<T | U>;
    map<U>((T) => U): Optional<U>;
    do((T) => void): void;
    flatMap<U>((T) => Optional<U>): Optional<U>;
    static fromNullable<T>(?T): Optional<T>;
    toResult(() => Error): Result<T>;
}

declare export function optionalFlat<T>(Optional<Optional<T>>): Optional<T>;
declare export function lift<A, B>((A) => B, Optional<A>): Optional<B>;
declare export function lift2<A, B, C>((A, B) => C, Optional<A>, Optional<B>): Optional<C>;
declare export function lift3<A, B, C, D>((A, B, C) => D, Optional<A>, Optional<B>, Optional<C>): Optional<D>;
declare export function lift4<A, B, C, D, E>((A, B, C, D) => E, Optional<A>, Optional<B>, Optional<C>, Optional<D>): Optional<E>;
declare export function getByKey<Key: string, Value>(key: Key, obj: { +[Key]: Value }) : Optional<Value>
