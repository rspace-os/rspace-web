//@flow strict

import { type Alert } from "../../stores/contexts/Alert";
import * as FetchingData from "../../util/fetchingData";
import { Optional } from "../../util/optional";

type Plan = {
  title: string,
  dmp_id: {| identifier: string |},
  contact?: {
    name: string,
    affiliation: {
      name: string,
      ...
    },
    ...
  },
  created: string,
  modified: string,
  ...
};

declare export class DmpSummary {
  constructor(dmp: Plan, addAlert: (Alert) => void): DmpSummary;

  get id(): string;

  get title(): string;

  get contactName(): Optional<string>;

  get contactAffiliationName(): Optional<string>;

  get created(): string;

  get modified(): string;

  importIntoGallery(): Promise<void>;
}

type ListPlansResponse = {|
  data: {|
    items: Array<{| dmp: Plan |}>,
    total_items: number,
  |},
  error: null | {|
    errorMessages: Array<string>,
  |},
|};

declare export class DmpListing {
  dmps: Array<DmpSummary>;
  totalCount: number;
  page: number;
  pageSize: number;

  constructor(
    data: ListPlansResponse["data"],
    page: number,
    pageSize: number,
    addAlert: (Alert) => void
  ): DmpListing;

  setPage(page: number): Promise<DmpListing>;

  setPageSize(pageSize: number): Promise<DmpListing>;

  getById(id: string): DmpSummary;
}

declare export function useDmpOnlineEndpoint(): {|
  firstPage: FetchingData.Fetched<DmpListing>,
|};
