//@flow

import { BookingType } from "./Enums";

export type BOOKING_TYPE = typeof BookingType;
export type Requester = { name: string };
export type Equipment = { name: string, id: number };
export type RequesterLab = { id: number, name: String };
export type BookingsList = Array<{
  id: number,
  start_time: string,
  end_time: string,
  equipment_id: string,
  status: string,
}>;

export type Note = {
  message: string,
};

export type BookingDetails = {
  id: string,
  requester: Requester,
  equipment: Equipment,
  booking_type: string,
  duration: number,
  requester_lab: RequesterLab,
  last_public_note: Note | null,
};

export type EquipmentDetails = {
  name: string,
  manufacturer: string,
  model: string,
  id: number,
};

export type BookingAndEquipmentDetails = {
  bookingID: string,
  requesterName: string,
  bookingType: string,
  duration: number,
  status: string,
  equipmentName: string,
  manufacturer: string,
  model: string,
  equipmentID: number,
  labID: number,
};

export type EquipmentWithBookingDetails = {
  equipmentID: string,
  equipmentName: string,
  manufacturer: string,
  model: string,
  maintenance_notes?: string,
  bookingID: string,
  start_time: string,
};

declare export const replaceNullWithEmptyString: (data: { ... }) => void;

declare export const getMostRecentCompletedBooking: (
  relevantBookings: Array<BookingDetails>,
  bookingList: BookingsList,
  equipmentID: number
) => ?BookingDetails;

declare export const makeBookingAndEquipmentData: (
  bookingsList: BookingsList,
  bookingDetails: Array<BookingDetails>,
  equipmentDetails: Array<EquipmentDetails>,
  isMaintenance: boolean
) => Array<BookingAndEquipmentDetails>;

declare export const makeEquipmentWithBookingData: (
  bookingsList: BookingsList,
  bookingDetails: Array<BookingDetails>,
  equipmentDetails: Array<EquipmentDetails>,
  isMaintenance: boolean
) => Array<EquipmentWithBookingDetails>;
