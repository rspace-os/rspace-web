{
  "parser": "hermes-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "es2023": true,
    "browser": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "plugins": ["react", "jsdoc", "ft-flow", "testing-library", "jest-dom", "jsx-a11y", "@typescript-eslint"],
  "settings": {
    "react": {
      "version": "detect",
      "flowVersion": "0.239.1"
    }
  },
  "overrides": [
    {
      "files": ["**/*.js", "**/*.js.flow"],
      "extends": ["plugin:ft-flow/recommended"],
      "rules": {
        "react/prop-types": "error"
      }
    },
    {
      "files": ["**/__tests__/**/*.[jt]s?(x)"],
      "extends": ["plugin:testing-library/react", "plugin:jest-dom/recommended"]
    },
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "parserOptions": {
          "project": "./tsconfig.json"
      },
      "extends": [
          "plugin:@typescript-eslint/recommended",
          "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "rules": {
        "react/prop-types": "off"
      }
    },
    {
        "files": ["**/*.spec.ts", "**/*.spec.tsx"],
        "rules": {
            // This is because playwright requires that we destructure "mount"
            // in the callback of the test invocation but at the same time
            // eslint complains about the class being unbound. This is not an
            // actual problem and so it is easier to just disable the rule for
            // all test files.
            "@typescript-eslint/unbound-method": "off"
        }
    }
  ],
  "rules": {
    // please keep this list sorted

    "array-callback-return": "error",
    "block-scoped-var": "warn",
    "camelcase": "warn",
    "class-methods-use-this": "off",
    "complexity": "warn",
    "default-param-last": "warn",
    "dot-notation": "warn",
    "eqeqeq": "error",

    // prettier adds in whitespace around code elements to break up long lines
    "ft-flow/generic-spacing": ["off"],
    "ft-flow/space-after-type-colon": ["off"],

    "guard-for-in": "error",

    // this raises a warning if an export doesn't have a comment
    "jsdoc/require-jsdoc": ["warn", {
      "publicOnly": true, // this doesn't seem to do anything
      "contexts": ["ExportDefaultDeclaration", "ExportNamedDeclaration"],
      "require": { "FunctionDeclaration": false }, // all other values default to false
      "enableFixer": false // don't automatically add empty comments
    }],

    "max-statements-per-line": ["warn", { "max": 2 }],
    "no-alert": "error",

    // permenant logging statements should indicate a severity with `.info`, `.warn`, or `.error`;
    // `.log`, `.debug`, and `.trace` should not be left in the codebase
    "no-console": ["warn", { "allow": ["info", "warn", "error"] }],

    "no-constant-binary-expression": "error",
    "no-duplicate-imports": "warn",
    "no-else-return": ["error", { "allowElseIf": false }],

    // playwright relies on empty patterns being used to destructure fixtures
    "no-empty-pattern": "off",

    "no-eval": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": "error",
    "no-implied-eval": "error",
    "no-invalid-this": "warn",
    "no-lonely-if": "warn",
    "no-multi-assign": "error",
    "no-nested-ternary": "warn",
    "no-octal-escape": "error",
    "no-prototype-builtins": "off",
    "no-return-assign": ["error", "always"],
    "no-return-await": "warn",
    "no-self-compare": "error",
    "no-shadow": "warn",
    "no-shadow-restricted-names": "error",
    "no-throw-literal": "warn",

    // we use no-global-assign and no-shadow-restricted-names to prevent
    // accidental overwriting of global variables `undefined`.
    "no-undefined": "off",

    "no-unneeded-ternary": "warn",
    "no-unused-expressions": "warn",

    // Allow parameters who names start with underscore to not throw a lint
    // warning. This is so that they may be typed even if they are not used,
    // e.g. on super or subclasses where the arguments are only used
    // by one class in the inheritence chain or where a react component
    // explicity states it takes no props. For more info see
    // https://eslint.org/docs/latest/rules/no-unused-vars#argsignorepattern
    "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],

    "no-use-before-define": "warn",
    "no-useless-concat": "error",
    "no-useless-return": "warn",
    "no-var": "error",
    "no-void": "off",
    "object-shorthand": ["warn", "always"],
    "prefer-arrow-callback": "warn",
    "prefer-const": "warn",
    "prefer-promise-reject-errors": "warn",
    "prefer-rest-params": "warn",
    "radix": ["warn", "always"],
    "require-await": "warn",
    "yoda": ["warn", "never"]
  }
}
